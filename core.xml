---
# Source: sitewhere-infra-core/charts/cp-zookeeper/templates/poddisruptionbudget.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: release-name-cp-zookeeper-pdb
  labels:
    app: cp-zookeeper
    chart: cp-zookeeper-0.1.0
    release: release-name
    heritage: Tiller
spec:
  selector:
    matchLabels:
      app: cp-zookeeper
      release: release-name
  maxUnavailable: 1

---
# Source: sitewhere-infra-core/templates/Secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: syncope
  labels:
    app: sitewhere-infra-core
    chart: sitewhere-infra-core-0.2.4
    release: "release-name"
    heritage: "Tiller"
type: Opaque
data:
  postgresql-password: c3luY29wZQ==

---
# Source: sitewhere-infra-core/templates/syncope-deployment.yaml
apiVersion: v1
kind: ConfigMap
metadata:
 name: release-name-syncope-environment-config
data:
 DBMS: postgresql
 DB_URL:  jdbc:postgresql://release-name-postgresql-headless:5432/syncope
 DB_USER: syncope
 DB_POOL_MAX: "10"
 DB_POOL_MIN: "2"
 OPENJPA_REMOTE_COMMIT: sjvm
 CORE_SCHEME: "http"
 CORE_HOST: "release-name-syncope"
 CORE_PORT: "8080"
 security.properties: |
  conf.directory=/etc/apache-syncope
  adminUser=synadmin
  adminPassword=DE088591C00CC98B36F5ADAAF7DA2B004CF7F2FE7BBB45B766B6409876E2F3DB13C7905C6AA59464
  adminPasswordAlgorithm=SSHA256
  anonymousUser=anonymous
  anonymousKey=anonymousKey
  secretKey=1abcdefghilmnopqrstuvz2!
  jwtIssuer=ApacheSyncope
  jwsAlgorithm=HS512
  jwsKey=ZW7pRixehFuNUtnY5Se47IemgMryTzazPPJ9CGX5LTCmsOJpOgHAQEuPQeV9A28f
  digester.saltIterations=1
  digester.saltSizeBytes=8
  digester.invertPositionOfPlainSaltInEncryptionResults=true
  digester.invertPositionOfSaltInMessageBeforeDigesting=true
  digester.useLenientSaltSizeCheck=true
  passwordGenerator=org.apache.syncope.core.spring.security.DefaultPasswordGenerator
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: release-name-syncope
spec:
  replicas: 1
  strategy: {}
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
      labels:
        name: "release-name-syncope"
        app.kubernetes.io/name: "release-name-syncope"
        app.kubernetes.io/instance: release-name
        sitewhere.io/role: "infrastructure"
        sitewhere.io/name: "syncope"
    spec:
      initContainers:
      - name: check-db-ready
        image: postgres:9.6.5
        command: ['sh', '-c', 
          'until pg_isready -h release-name-postgresql-headless -p 5432; 
          do echo waiting for database; sleep 2; done;']
      containers:
      - name: syncope
        envFrom:
        - configMapRef:
           name: release-name-syncope-environment-config
        env:
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: syncope
              key: postgresql-password
        image: "apache/syncope:2.1.4"
        ports:
        - containerPort: 8080
        resources: {}
        volumeMounts:
          - name: config-volume
            mountPath: /etc/apache-syncope/security.properties
            subPath: security.properties
      volumes:
      - name: config-volume
        configMap:
          name: release-name-syncope-environment-config
      restartPolicy: Always
status: {}
---
apiVersion: v1
kind: Service
metadata:
  name: "release-name-syncope"
spec:
  type: "ClusterIP"
  selector:
    name: "release-name-syncope"
  ports:
  - port: 8080
    name: http-api

---
# Source: sitewhere-infra-core/charts/cp-kafka/templates/headless-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-cp-kafka-headless
  labels:
    app: cp-kafka
    chart: cp-kafka-0.1.0
    release: release-name
    heritage: Tiller
spec:
  ports:
    - port: 9092
      name: broker
  clusterIP: None
  selector:
    app: cp-kafka
    release: release-name
---
# Source: sitewhere-infra-core/charts/cp-kafka/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-cp-kafka
  labels:
    app: cp-kafka
    chart: cp-kafka-0.1.0
    release: release-name
    heritage: Tiller
spec:
  ports:
    - port: 9092
      name: broker
  selector:
    app: cp-kafka
    release: release-name
---
# Source: sitewhere-infra-core/charts/cp-zookeeper/templates/headless-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-cp-zookeeper-headless
  labels:
    app: cp-zookeeper
    chart: cp-zookeeper-0.1.0
    release: release-name
    heritage: Tiller
spec:
  ports:
    - port: 2888
      name: server
    - port: 3888
      name: leader-election
  clusterIP: None
  selector:
    app: cp-zookeeper
    release: release-name
---
# Source: sitewhere-infra-core/charts/cp-zookeeper/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-cp-zookeeper
  labels:
    app: cp-zookeeper
    chart: cp-zookeeper-0.1.0
    release: release-name
    heritage: Tiller
spec:
  type: 
  ports:
    - port: 2181
      name: client
  selector:
    app: cp-zookeeper
    release: release-name
---
# Source: sitewhere-infra-core/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql-headless
  labels:
    app: postgresql
    chart: postgresql-5.3.7
    release: "release-name"
    heritage: "Tiller"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: postgresql
    port: 5432
    targetPort: postgresql
  selector:
    app: postgresql
    release: "release-name"

---
# Source: sitewhere-infra-core/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql
  labels:
    app: postgresql
    chart: postgresql-5.3.7
    release: "release-name"
    heritage: "Tiller"
spec:
  type: ClusterIP
  ports:
  - name: postgresql
    port: 5432
    targetPort: postgresql
  selector:
    app: postgresql
    release: "release-name"
    role: master

---
# Source: sitewhere-infra-core/charts/cp-kafka/templates/tests/canary-pod.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-canary"
  annotations:
    "helm.sh/hook": test-success
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
spec:
  containers:
  - name: release-name-canary
    image: "confluentinc/cp-enterprise-kafka:5.2.1"
    imagePullPolicy: "IfNotPresent"
    command:
    - sh
    - -c
    - |
      # Delete the topic if it exists
      kafka-topics --zookeeper release-name-cp-zookeeper-headless:2181 --topic release-name-cp-kafka-canary-topic --delete --if-exists
      # Create the topic
      kafka-topics --zookeeper release-name-cp-zookeeper-headless:2181 --topic release-name-cp-kafka-canary-topic --create --partitions 1 --replication-factor 1 --if-not-exists && \
      # Create a message
      MESSAGE="`date -u`" && \
      # Produce a test message to the topic
      echo "$MESSAGE" | kafka-console-producer --broker-list release-name-cp-kafka:9092 --topic release-name-cp-kafka-canary-topic && \
      # Consume a test message from the topic
      kafka-console-consumer --bootstrap-server release-name-cp-kafka-headless:9092 --topic release-name-cp-kafka-canary-topic --from-beginning --timeout-ms 2000 | grep "$MESSAGE"
  restartPolicy: Never
---
# Source: sitewhere-infra-core/templates/syncope-console-deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: release-name-syncope-console
spec:
  replicas: 1
  strategy: {}
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
      labels:
        name: "release-name-syncope-console"
        app.kubernetes.io/name: "release-name-syncope-console"
        app.kubernetes.io/instance: release-name
        sitewhere.io/role: "infrastructure"
        sitewhere.io/name: "syncope-console"
    spec:
      containers:
      - name: syncope-console
        envFrom:
        - configMapRef:
           name: release-name-syncope-environment-config
        image: "apache/syncope-console:2.1.4"
        ports:
        - containerPort: 8080
        resources: {}
      restartPolicy: Always
status: {}
---
apiVersion: v1
kind: Service
metadata:
  name: "release-name-syncope-console"
spec:
  type: "ClusterIP"
  selector:
    name: "release-name-syncope-console"
  ports:
  - port: 8080
    name: http-api

---
# Source: sitewhere-infra-core/templates/syncope-enduser-deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: release-name-syncope-enduser
spec:
  replicas: 1
  strategy: {}
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
      labels:
        name: "release-name-syncope-enduser"
        app.kubernetes.io/name: "release-name-syncope-enduser"
        app.kubernetes.io/instance: release-name
        sitewhere.io/role: "infrastructure"
        sitewhere.io/name: "syncope-enduser"
    spec:
      containers:
      - name: syncope-enduser
        envFrom:
        - configMapRef:
           name: release-name-syncope-environment-config
        image: "apache/syncope-enduser:2.1.4"
        ports:
        - containerPort: 8080
        resources: {}
      restartPolicy: Always
status: {}
---
apiVersion: v1
kind: Service
metadata:
  name: "release-name-syncope-enduser"
spec:
  type: "ClusterIP"
  selector:
    name: "release-name-syncope-enduser"
  ports:
  - port: 8080
    name: http-api

---
# Source: sitewhere-infra-core/charts/cp-kafka/templates/statefulset.yaml
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: release-name-cp-kafka
  labels:
    app: cp-kafka
    chart: cp-kafka-0.1.0
    release: release-name
    heritage: Tiller
spec:
  serviceName: release-name-cp-kafka-headless
  podManagementPolicy: Parallel
  replicas: 3
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: cp-kafka
        release: release-name
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - cp-kafka
                  - key: "release"
                    operator: In
                    values:
                    - release-name
              topologyKey: "kubernetes.io/hostname"
      containers:
      - name: cp-kafka-broker
        image: "confluentinc/cp-enterprise-kafka:5.2.1"
        imagePullPolicy: "IfNotPresent"
        ports:
        - containerPort: 9092
          name: kafka
        resources:
          {}
          
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: HOST_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KAFKA_HEAP_OPTS
          value: -Xms512M -Xmx512M
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: "release-name-cp-zookeeper-headless:2181"
        - name: KAFKA_LOG_DIRS
          value: "/opt/kafka/data-0/logs"
        - name: KAFKA_METRIC_REPORTERS
          value: "io.confluent.metrics.reporter.ConfluentMetricsReporter"
        - name: CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS
          value: "PLAINTEXT://release-name-cp-kafka-headless:9092"
        - name: "KAFKA_AUTO_CREATE_TOPICS_ENABLE"
          value: "false"
        - name: "KAFKA_LISTENER_SECURITY_PROTOCOL_MAP"
          value: "PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT"
        - name: "KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR"
          value: "3"
        - name: KAFKA_JMX_PORT
          value: "5555"
        # This is required because the Downward API does not yet support identification of
        # pod numbering in statefulsets. Thus, we are required to specify a command which
        # allows us to extract the pod ID for usage as the Kafka Broker ID.
        # See: https://github.com/kubernetes/kubernetes/issues/31218
        command:
        - sh
        - -exc
        - |
          export KAFKA_BROKER_ID=${HOSTNAME##*-} && \
          export KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://${POD_NAME}.release-name-cp-kafka-headless.${POD_NAMESPACE}:9092,EXTERNAL://${HOST_IP}:$((31090 + ${KAFKA_BROKER_ID})) && \
          exec /etc/confluent/docker/run
        volumeMounts:
        - name: datadir-0
          mountPath: /opt/kafka/data-0
      volumes:
  volumeClaimTemplates:
  - metadata:
      name: datadir-0
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: "8Gi"

---
# Source: sitewhere-infra-core/charts/cp-zookeeper/templates/statefulset.yaml
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: release-name-cp-zookeeper
  labels:
    app: cp-zookeeper
    chart: cp-zookeeper-0.1.0
    release: release-name
    heritage: Tiller
spec:
  serviceName: release-name-cp-zookeeper-headless
  podManagementPolicy: Parallel
  replicas: 3
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: cp-zookeeper
        release: release-name
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - cp-zookeeper
                  - key: "release"
                    operator: In
                    values:
                    - release-name
              topologyKey: "kubernetes.io/hostname"
      containers:
      - name: cp-zookeeper-server
        image: "confluentinc/cp-zookeeper:5.2.1"
        imagePullPolicy: "IfNotPresent"
        ports:
        - containerPort: 2181
          name: client
        - containerPort: 2888
          name: server
        - containerPort: 3888
          name: leader-election
        resources:
          {}
          
        env:
        - name : KAFKA_HEAP_OPTS
          value: "-Xms512M -Xmx512M"
        - name : KAFKA_JMX_PORT
          value: "5555"
        - name : ZOOKEEPER_TICK_TIME
          value: "2000"
        - name : ZOOKEEPER_SYNC_LIMIT
          value: "5"
        - name : ZOOKEEPER_INIT_LIMIT
          value: "10"
        - name : ZOOKEEPER_MAX_CLIENT_CNXNS
          value: "60"
        - name : ZOOKEEPER_AUTOPURGE_SNAP_RETAIN_COUNT
          value: "3"
        - name : ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL
          value: "24"
        - name: ZOOKEEPER_CLIENT_PORT
          value: "2181"
        - name : ZOOKEEPER_SERVERS
          value: "release-name-cp-zookeeper-0.release-name-cp-zookeeper-headless.default:2888:3888;release-name-cp-zookeeper-1.release-name-cp-zookeeper-headless.default:2888:3888;release-name-cp-zookeeper-2.release-name-cp-zookeeper-headless.default:2888:3888"
        # ZOOKEEPER_SERVER_ID is required just to pass cp-zookeeper ensure script for env check,
        # the value(metadata.mame) is not used and will be overwritten in command part
        - name: ZOOKEEPER_SERVER_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        command:
        - "bash"
        - "-c"
        - |
          ZK_FIX_HOST_REGEX="s/${HOSTNAME}\.[^:]*:/0.0.0.0:/g"
          ZOOKEEPER_SERVER_ID=$((${HOSTNAME##*-}+1)) \
          ZOOKEEPER_SERVERS=`echo $ZOOKEEPER_SERVERS | sed -e "$ZK_FIX_HOST_REGEX"` \
          /etc/confluent/docker/run
        volumeMounts:
        - name: datadir
          mountPath: /var/lib/zookeeper/data
        - name: datalogdir
          mountPath: /var/lib/zookeeper/log
      volumes:
      
  volumeClaimTemplates:
  - metadata:
      name: datadir
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: "4Gi"
  - metadata:
      name: datalogdir
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: "4Gi"

---
# Source: sitewhere-infra-core/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  name: release-name-postgresql
  labels:
    app: postgresql
    chart: postgresql-5.3.7
    release: "release-name"
    heritage: "Tiller"
spec:
  serviceName: release-name-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: postgresql
      release: "release-name"
      role: master
  template:
    metadata:
      name: release-name-postgresql
      labels:
        app: postgresql
        chart: postgresql-5.3.7
        release: "release-name"
        heritage: "Tiller"
        role: master
      annotations:
        sidecar.istio.io/inject: "false"
        
    spec:      
      securityContext:
        fsGroup: 1001
      initContainers:
      - name: init-chmod-data
        image: docker.io/bitnami/minideb:latest
        imagePullPolicy: "Always"
        resources:
          requests:
            cpu: 250m
            memory: 256Mi
          
        command:
          - sh
          - -c
          - |
            mkdir -p /bitnami/postgresql/data
            chmod 700 /bitnami/postgresql/data
            find /bitnami/postgresql -mindepth 1 -maxdepth 1 -not -name ".snapshot" | \
              xargs chown -R 1001:1001
        securityContext:
          runAsUser: 0
        volumeMounts:
        - name: data
          mountPath: /bitnami/postgresql
          subPath: 
      containers:
      - name: release-name-postgresql
        image: docker.io/bitnami/postgresql:11.3.0-debian-9-r38
        imagePullPolicy: "IfNotPresent"
        resources:
          requests:
            cpu: 250m
            memory: 256Mi
          
        securityContext:
          runAsUser: 1001
        env:
        - name: BITNAMI_DEBUG
          value: "false"
        - name: POSTGRESQL_PORT_NUMBER
          value: "5432"
        - name: PGDATA
          value: "/bitnami/postgresql/data"
        - name: POSTGRES_USER
          value: "syncope"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: syncope
              key: postgresql-password
        - name: POSTGRES_DB
          value: "syncope"
        ports:
        - name: postgresql
          containerPort: 5432
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready -U "syncope" -d "syncope" -h 127.0.0.1 -p 5432
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - |
              pg_isready -U "syncope" -d "syncope" -h 127.0.0.1 -p 5432
              [ -f /opt/bitnami/postgresql/tmp/.initialized ]
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        volumeMounts:
        - name: data
          mountPath: /bitnami/postgresql
          subPath: 
      volumes:
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "4Gi"

---
# Source: sitewhere-infra-core/charts/cp-kafka/templates/jmx-configmap.yaml

---
# Source: sitewhere-infra-core/charts/cp-kafka/templates/nodeport-service.yaml


---
# Source: sitewhere-infra-core/charts/cp-zookeeper/templates/jmx-configmap.yaml

---
# Source: sitewhere-infra-core/charts/postgresql/templates/configmap.yaml


---
# Source: sitewhere-infra-core/charts/postgresql/templates/extended-config-configmap.yaml


---
# Source: sitewhere-infra-core/charts/postgresql/templates/initialization-configmap.yaml


---
# Source: sitewhere-infra-core/charts/postgresql/templates/metrics-svc.yaml


---
# Source: sitewhere-infra-core/charts/postgresql/templates/networkpolicy.yaml


---
# Source: sitewhere-infra-core/charts/postgresql/templates/secrets.yaml

---
# Source: sitewhere-infra-core/charts/postgresql/templates/serviceaccount.yaml

---
# Source: sitewhere-infra-core/charts/postgresql/templates/servicemonitor.yaml


---
# Source: sitewhere-infra-core/charts/postgresql/templates/statefulset-slaves.yaml


---
# Source: sitewhere-infra-core/charts/postgresql/templates/svc-read.yaml


