---
# Source: sitewhere/charts/sitewhere-infra-core/charts/cp-zookeeper/templates/poddisruptionbudget.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: release-name-cp-zookeeper-pdb
  labels:
    app: cp-zookeeper
    chart: cp-zookeeper-0.1.0
    release: release-name
    heritage: Tiller
spec:
  selector:
    matchLabels:
      app: cp-zookeeper
      release: release-name
  maxUnavailable: 1

---
# Source: sitewhere/charts/sitewhere-infra-database/charts/mongodb/templates/poddisruptionbudget-arbiter-rs.yaml

apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  labels:
    app: mongodb
    chart: mongodb-5.2.0
    heritage: Tiller
    release: release-name
  name: release-name-mongodb-arbiter
spec:
  selector:
    matchLabels:
      app: mongodb
      release: release-name
      component: arbiter
  minAvailable: 1
---
# Source: sitewhere/charts/sitewhere-infra-database/charts/mongodb/templates/poddisruptionbudget-primary-rs.yaml

apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  labels:
    app: mongodb
    chart: mongodb-5.2.0
    heritage: Tiller
    release: release-name
  name: release-name-mongodb-primary
spec:
  selector:
    matchLabels:
      app: mongodb
      release: release-name
      component: primary
  minAvailable: 1
---
# Source: sitewhere/charts/sitewhere-infra-database/charts/mongodb/templates/poddisruptionbudget-secondary-rs.yaml

apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  labels:
    app: mongodb
    chart: mongodb-5.2.0
    heritage: Tiller
    release: release-name
  name: release-name-mongodb-secondary
spec:
  selector:
    matchLabels:
      app: mongodb
      release: release-name
      component: secondary
  minAvailable: 1

---
# Source: sitewhere/charts/sitewhere-infra-core/templates/Secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: syncope
  labels:
    app: sitewhere-infra-core
    chart: sitewhere-infra-core-0.2.4
    release: "release-name"
    heritage: "Tiller"
type: Opaque
data:
  postgresql-password: c3luY29wZQ==

---
# Source: sitewhere/charts/sitewhere-infra-database/charts/tenantsdb/templates/secrets.yaml

apiVersion: v1
kind: Secret
metadata:
  name: release-name-tenantsdb
  labels:
    app: tenantsdb
    chart: tenantsdb-6.5.0
    release: "release-name"
    heritage: "Tiller"
type: Opaque
data:
  postgresql-password: "MTliZmZjN1duRg=="
---
# Source: sitewhere/charts/sitewhere-infra-core/templates/syncope-deployment.yaml
apiVersion: v1
kind: ConfigMap
metadata:
 name: release-name-syncope-environment-config
data:
 DBMS: postgresql
 DB_URL:  jdbc:postgresql://release-name-postgresql-headless:5432/syncope
 DB_USER: syncope
 DB_POOL_MAX: "10"
 DB_POOL_MIN: "2"
 OPENJPA_REMOTE_COMMIT: sjvm
 CORE_SCHEME: "http"
 CORE_HOST: "release-name-syncope"
 CORE_PORT: "8080"
 security.properties: |
  conf.directory=/etc/apache-syncope
  adminUser=synadmin
  adminPassword=DE088591C00CC98B36F5ADAAF7DA2B004CF7F2FE7BBB45B766B6409876E2F3DB13C7905C6AA59464
  adminPasswordAlgorithm=SSHA256
  anonymousUser=anonymous
  anonymousKey=anonymousKey
  secretKey=1abcdefghilmnopqrstuvz2!
  jwtIssuer=ApacheSyncope
  jwsAlgorithm=HS512
  jwsKey=ZW7pRixehFuNUtnY5Se47IemgMryTzazPPJ9CGX5LTCmsOJpOgHAQEuPQeV9A28f
  digester.saltIterations=1
  digester.saltSizeBytes=8
  digester.invertPositionOfPlainSaltInEncryptionResults=true
  digester.invertPositionOfSaltInMessageBeforeDigesting=true
  digester.useLenientSaltSizeCheck=true
  passwordGenerator=org.apache.syncope.core.spring.security.DefaultPasswordGenerator
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: release-name-syncope
spec:
  replicas: 1
  strategy: {}
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
      labels:
        name: "release-name-syncope"
        app.kubernetes.io/name: "release-name-syncope"
        app.kubernetes.io/instance: release-name
        sitewhere.io/role: "infrastructure"
        sitewhere.io/name: "syncope"
    spec:
      initContainers:
      - name: check-db-ready
        image: postgres:9.6.5
        command: ['sh', '-c', 
          'until pg_isready -h release-name-postgresql-headless -p 5432; 
          do echo waiting for database; sleep 2; done;']
      containers:
      - name: syncope
        envFrom:
        - configMapRef:
           name: release-name-syncope-environment-config
        env:
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: syncope
              key: postgresql-password
        image: "apache/syncope:2.1.4"
        ports:
        - containerPort: 8080
        resources: {}
        volumeMounts:
          - name: config-volume
            mountPath: /etc/apache-syncope/security.properties
            subPath: security.properties
      volumes:
      - name: config-volume
        configMap:
          name: release-name-syncope-environment-config
      restartPolicy: Always
status: {}
---
apiVersion: v1
kind: Service
metadata:
  name: "release-name-syncope"
spec:
  type: "ClusterIP"
  selector:
    name: "release-name-syncope"
  ports:
  - port: 8080
    name: http-api

---
# Source: sitewhere/charts/sitewhere-infra-database/charts/influxdb/templates/config.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  name: "release-name-influxdb"
  labels:
    app: "release-name-influxdb"
    chart: "influxdb-3.0.2"
    release: "release-name"
    heritage: "Tiller"
data:
  influxdb.conf: |+
    reporting-disabled = false
    bind-address = ":8088"

    [meta]
      dir = "/var/lib/influxdb/meta"
      retention-autocreate = true
      logging-enabled = true

    [data]
      dir = "/var/lib/influxdb/data"
      wal-dir = "/var/lib/influxdb/wal"
      query-log-enabled = true
      cache-max-memory-size = 1073741824
      cache-snapshot-memory-size = 26214400
      cache-snapshot-write-cold-duration = "10m0s"
      compact-full-write-cold-duration = "4h0m0s"
      max-series-per-database = 1000000
      max-values-per-tag = 100000
      index-version = "inmem"
      trace-logging-enabled = false

    [coordinator]
      write-timeout = "10s"
      max-concurrent-queries = 0
      query-timeout = "0s"
      log-queries-after = "0s"
      max-select-point = 0
      max-select-series = 0
      max-select-buckets = 0

    [retention]
      enabled = true
      check-interval = "30m0s"

    [shard-precreation]
      enabled = true
      check-interval = "10m0s"
      advance-period = "30m0s"

    [admin]
      enabled = false
      bind-address = ":8083"
      https-enabled = false
      https-certificate = "/etc/ssl/influxdb.pem"

    [monitor]
      store-enabled = true
      store-database = "_internal"
      store-interval = "10s"

    [subscriber]
      enabled = true
      http-timeout = "30s"
      insecure-skip-verify = false
      ca-certs = ""
      write-concurrency = 40
      write-buffer-size = 1000

    [http]
      enabled = true
      bind-address = ":8086"
      flux-enabled = true
      auth-enabled = false
      log-enabled = true
      write-tracing = false
      pprof-enabled = true
      https-enabled = false
      https-certificate = "/etc/ssl/influxdb.pem"
      https-private-key = ""
      max-row-limit = 10000
      max-connection-limit = 0
      shared-secret = "beetlejuicebeetlejuicebeetlejuice"
      realm = "InfluxDB"
      unix-socket-enabled = false
      bind-socket = "/var/run/influxdb.sock"
    
    # TODO: allow multiple graphite listeners
    
    [[graphite]]
      enabled = false
      bind-address = ":2003"
      database = "graphite"
      retention-policy = "autogen"
      protocol = "tcp"
      batch-size = 5000
      batch-pending = 10
      batch-timeout = "1s"
      consistency-level = "one"
      separator = "."
      udp-read-buffer = 0
    
    # TODO: allow multiple collectd listeners with templates

    [[collectd]]
      enabled = false
      bind-address = ":25826"
      database = "collectd"
      retention-policy = "autogen"
      batch-size = 5000
      batch-pending = 10
      batch-timeout = "10s"
      read-buffer = 0
      typesdb = "/usr/share/collectd/types.db"
      security-level = "none"
      auth-file = "/etc/collectd/auth_file"
    
    # TODO: allow multiple opentsdb listeners with templates

    [[opentsdb]]
      enabled = false
      bind-address = ":4242"
      database = "opentsdb"
      retention-policy = "autogen"
      consistency-level = "one"
      tls-enabled = false
      certificate = "/etc/ssl/influxdb.pem"
      batch-size = 1000
      batch-pending = 5
      batch-timeout = "1s"
      log-point-errors = true
    
    # TODO: allow multiple udp listeners with templates

    [[udp]]
      enabled = false
      bind-address = ":8089"
      database = "udp"
      retention-policy = "autogen"
      batch-size = 5000
      batch-pending = 10
      read-buffer = 0
      batch-timeout = "1s"
      precision = "ns"

    [continuous_queries]
      log-enabled = true
      enabled = true
      run-interval = "1s"

    [logging]
      format =  "auto"
      level =  "info"
      supress-logo = false

---
# Source: sitewhere/charts/sitewhere-infra-database/charts/warp10/templates/config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: "release-name-warp10"
  labels:
    app.kubernetes.io/name: warp10
    helm.sh/chart: "warp10-0.2.0"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Tiller"
data:
  wrap10.conf: |+
---
# Source: sitewhere/charts/sitewhere-infra-core/charts/cp-kafka/templates/headless-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-cp-kafka-headless
  labels:
    app: cp-kafka
    chart: cp-kafka-0.1.0
    release: release-name
    heritage: Tiller
spec:
  ports:
    - port: 9092
      name: broker
  clusterIP: None
  selector:
    app: cp-kafka
    release: release-name
---
# Source: sitewhere/charts/sitewhere-infra-core/charts/cp-kafka/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-cp-kafka
  labels:
    app: cp-kafka
    chart: cp-kafka-0.1.0
    release: release-name
    heritage: Tiller
spec:
  ports:
    - port: 9092
      name: broker
  selector:
    app: cp-kafka
    release: release-name
---
# Source: sitewhere/charts/sitewhere-infra-core/charts/cp-zookeeper/templates/headless-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-cp-zookeeper-headless
  labels:
    app: cp-zookeeper
    chart: cp-zookeeper-0.1.0
    release: release-name
    heritage: Tiller
spec:
  ports:
    - port: 2888
      name: server
    - port: 3888
      name: leader-election
  clusterIP: None
  selector:
    app: cp-zookeeper
    release: release-name
---
# Source: sitewhere/charts/sitewhere-infra-core/charts/cp-zookeeper/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-cp-zookeeper
  labels:
    app: cp-zookeeper
    chart: cp-zookeeper-0.1.0
    release: release-name
    heritage: Tiller
spec:
  type: 
  ports:
    - port: 2181
      name: client
  selector:
    app: cp-zookeeper
    release: release-name
---
# Source: sitewhere/charts/sitewhere-infra-core/charts/postgresql/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql-headless
  labels:
    app: postgresql
    chart: postgresql-5.3.7
    release: "release-name"
    heritage: "Tiller"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: postgresql
    port: 5432
    targetPort: postgresql
  selector:
    app: postgresql
    release: "release-name"

---
# Source: sitewhere/charts/sitewhere-infra-core/charts/postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql
  labels:
    app: postgresql
    chart: postgresql-5.3.7
    release: "release-name"
    heritage: "Tiller"
spec:
  type: ClusterIP
  ports:
  - name: postgresql
    port: 5432
    targetPort: postgresql
  selector:
    app: postgresql
    release: "release-name"
    role: master

---
# Source: sitewhere/charts/sitewhere-infra-database/charts/cassandra/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-cassandra
  labels:
    app: cassandra
    chart: cassandra-0.10.1
    release: release-name
    heritage: Tiller
spec:
  clusterIP: None
  type: ClusterIP
  ports:
  - name: intra
    port: 7000
    targetPort: 7000
  - name: tls
    port: 7001
    targetPort: 7001
  - name: jmx
    port: 7199
    targetPort: 7199
  - name: cql
    port: 9042
    targetPort: 9042
  - name: thrift
    port: 9160
    targetPort: 9160
  selector:
    app: cassandra
    release: release-name

---
# Source: sitewhere/charts/sitewhere-infra-database/charts/influxdb/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "release-name-influxdb"
  labels:
    app: "release-name-influxdb"
    chart: "influxdb-3.0.2"
    release: "release-name"
    heritage: "Tiller"
spec:
  type: ClusterIP
  ports:
  - name: api
    port: 8086
    targetPort: 8086
  - name: rpc
    port: 8088
    targetPort: 8088
  selector:
    app: release-name-influxdb

---
# Source: sitewhere/charts/sitewhere-infra-database/charts/mongodb/templates/headless-svc-rs.yaml

apiVersion: v1
kind: Service
metadata:
  name: release-name-mongodb-headless
  labels:
    app: mongodb
    chart: mongodb-5.2.0
    release: "release-name"
    heritage: "Tiller"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: mongodb
    port: 27017
  selector:
    app: mongodb
    release: release-name

---
# Source: sitewhere/charts/sitewhere-infra-database/charts/mongodb/templates/svc-primary-rs.yaml

apiVersion: v1
kind: Service
metadata:
  name: release-name-mongodb
  labels:
    app: mongodb
    chart: mongodb-5.2.0
    release: "release-name"
    heritage: "Tiller"
spec:
  type: ClusterIP
  ports:
  - name: mongodb
    port: 27017
    targetPort: mongodb
  selector:
    app: mongodb
    release: "release-name"
    component: primary

---
# Source: sitewhere/charts/sitewhere-infra-database/charts/tenantsdb/templates/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-tenantsdb-headless
  labels:
    app: tenantsdb
    chart: tenantsdb-6.5.0
    release: "release-name"
    heritage: "Tiller"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: postgresql
    port: 5432
    targetPort: postgresql
  selector:
    app: tenantsdb
    release: "release-name"

---
# Source: sitewhere/charts/sitewhere-infra-database/charts/tenantsdb/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-tenantsdb
  labels:
    app: tenantsdb
    chart: tenantsdb-6.5.0
    release: "release-name"
    heritage: "Tiller"
spec:
  type: ClusterIP
  ports:
  - name: postgresql
    port: 5432
    targetPort: postgresql
  selector:
    app: tenantsdb
    release: "release-name"
    role: master

---
# Source: sitewhere/charts/sitewhere-infra-database/charts/warp10/templates/headless-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-warp10-headless
  labels:
    app.kubernetes.io/name: "warp10"
    helm.sh/chart: "warp10-0.2.0"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Tiller"
spec:
  ports:
  - name: api
    port: 8080
    targetPort: 8080
  - name: studio
    port: 8081
    targetPort: 8081
  clusterIP: None
  selector:
    app.kubernetes.io/name: warp10
    app.kubernetes.io/instance: release-name
---
# Source: sitewhere/charts/sitewhere-infra-database/charts/warp10/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: "release-name-warp10"
  labels:
    app.kubernetes.io/name: "warp10"
    helm.sh/chart: "warp10-0.2.0"
    app.kubernetes.io/instance: "release-name"
    app.kubernetes.io/managed-by: "Tiller"
spec:
  ports:
  - name: api
    port: 8080
    targetPort: 8080
  - name: studio
    port: 8081
    targetPort: 8081
  selector:
    app.kubernetes.io/name: warp10
    app.kubernetes.io/instance: release-name


---
# Source: sitewhere/charts/sitewhere-infra-core/charts/cp-kafka/templates/tests/canary-pod.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-canary"
  annotations:
    "helm.sh/hook": test-success
    "helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded"
spec:
  containers:
  - name: release-name-canary
    image: "confluentinc/cp-enterprise-kafka:5.2.1"
    imagePullPolicy: "IfNotPresent"
    command:
    - sh
    - -c
    - |
      # Delete the topic if it exists
      kafka-topics --zookeeper release-name-cp-zookeeper-headless:2181 --topic release-name-cp-kafka-canary-topic --delete --if-exists
      # Create the topic
      kafka-topics --zookeeper release-name-cp-zookeeper-headless:2181 --topic release-name-cp-kafka-canary-topic --create --partitions 1 --replication-factor 1 --if-not-exists && \
      # Create a message
      MESSAGE="`date -u`" && \
      # Produce a test message to the topic
      echo "$MESSAGE" | kafka-console-producer --broker-list release-name-cp-kafka:9092 --topic release-name-cp-kafka-canary-topic && \
      # Consume a test message from the topic
      kafka-console-consumer --bootstrap-server release-name-cp-kafka-headless:9092 --topic release-name-cp-kafka-canary-topic --from-beginning --timeout-ms 2000 | grep "$MESSAGE"
  restartPolicy: Never
---
# Source: sitewhere/charts/sitewhere-infra-core/templates/syncope-console-deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: release-name-syncope-console
spec:
  replicas: 1
  strategy: {}
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
      labels:
        name: "release-name-syncope-console"
        app.kubernetes.io/name: "release-name-syncope-console"
        app.kubernetes.io/instance: release-name
        sitewhere.io/role: "infrastructure"
        sitewhere.io/name: "syncope-console"
    spec:
      containers:
      - name: syncope-console
        envFrom:
        - configMapRef:
           name: release-name-syncope-environment-config
        image: "apache/syncope-console:2.1.4"
        ports:
        - containerPort: 8080
        resources: {}
      restartPolicy: Always
status: {}
---
apiVersion: v1
kind: Service
metadata:
  name: "release-name-syncope-console"
spec:
  type: "ClusterIP"
  selector:
    name: "release-name-syncope-console"
  ports:
  - port: 8080
    name: http-api

---
# Source: sitewhere/charts/sitewhere-infra-core/templates/syncope-enduser-deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: release-name-syncope-enduser
spec:
  replicas: 1
  strategy: {}
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
      labels:
        name: "release-name-syncope-enduser"
        app.kubernetes.io/name: "release-name-syncope-enduser"
        app.kubernetes.io/instance: release-name
        sitewhere.io/role: "infrastructure"
        sitewhere.io/name: "syncope-enduser"
    spec:
      containers:
      - name: syncope-enduser
        envFrom:
        - configMapRef:
           name: release-name-syncope-environment-config
        image: "apache/syncope-enduser:2.1.4"
        ports:
        - containerPort: 8080
        resources: {}
      restartPolicy: Always
status: {}
---
apiVersion: v1
kind: Service
metadata:
  name: "release-name-syncope-enduser"
spec:
  type: "ClusterIP"
  selector:
    name: "release-name-syncope-enduser"
  ports:
  - port: 8080
    name: http-api

---
# Source: sitewhere/templates/Asset-Management.yaml


apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-sitewhere-asset-management
  labels:
    app.kubernetes.io/name: sitewhere
    helm.sh/chart: sitewhere-0.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Tiller
    sitewhere.io/role: "microservice"
    sitewhere.io/name: "asset-management"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sitewhere-asset-management
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sitewhere-asset-management
        app.kubernetes.io/instance: release-name
        sitewhere.io/role: "microservice"
        sitewhere.io/name: "asset-management"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/scheme: "http"
        prometheus.io/port: "9090"
    spec:
      containers:
        - name: sitewhere-asset-management          
          image: "docker.io/sitewhere/service-asset-management:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9000
            - containerPort: 9001
            - containerPort: 9090
          env:
            - name: "sitewhere.k8s.pod.ip"
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: "sitewhere.namespace"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: "sitewhere.instance.id"
              value: "release-name"
            - name: "sitewhere.metrics.port"
              value: "9090"
            - name: "sitewhere.zookeeper.host"
              value: "release-name-cp-zookeeper"
            - name: "sitewhere.zookeeper.port"
              value: "2181"
            - name: "sitewhere.kafka.bootstrap.servers"
              value: "release-name-cp-kafka:9092"
            - name: "sitewhere.kafka.defaultTopicReplicationFactor"
              value: "3"
            - name: "sitewhere.grpc.maxRetryCount"
              value: "7"
            - name: "sitewhere.grpc.initialBackoffSeconds"
              value: "11"
            - name: "sitewhere.grpc.maxBackoffSeconds"
              value: "700"
            - name: "sitewhere.grpc.backoffMultiplier"
              value: "1.6"
            - name: "sitewhere.grpc.resolveFQDN"
              value: "false"
            - name: "mqtt.host"
              value: "release-name-sitewhere-mosquitto-svc"
            - name: "mongodb.host"
              value: "release-name-mongodb"
            - name: "mongodb.replicaset"
              value: "rs0"
            - name: "tenantsdb.url"
              value: "jdbc:postgresql://sitewhere-tenantsdb-headless.default.svc.cluster.local/tenantsdb"
            - name: "tenantsdb.username"
              value: "sitewhere"
            - name: "tenantsdb.password"
              valueFrom:
                secretKeyRef:
                  name: sitewhere-tenantsdb
                  key: postgresql-password
            - name: "warp10.url"
              value: "http://release-name-sitewhere-warp10-headless.default.svc.cluster.local:8080/api/v0"
            - name: "LOGGING_LEVEL_SITEWHERE"
              value: "INFO"
            - name: "LOGGING_LEVEL_SITEWHERE_GRPC"
              value: "INFO"
            - name: "LOGGING_LEVEL_SITEWHERE_KAFKA"
              value: "INFO"
            - name: "LOGGING_LEVEL_GRPC_INTERNAL"
              value: "ERROR"
            - name: "LOGGING_LEVEL_SPRING_BOOT"
              value: "INFO"
            - name: "LOGGING_LEVEL_SPRING_CONTEXT"
              value: "INFO"
            - name: "LOGGING_LEVEL_SPRING_SECURITY"
              value: "INFO"
            - name: "LOGGING_LEVEL_KAFKA"
              value: "ERROR"
            - name: "LOGGING_LEVEL_ZOOKEEPER"
              value: "ERROR"
            - name: "LOGGING_LEVEL_MONGODB"
              value: "WARN"
          resources:
            limits:
              memory: "800Mi" 
              cpu: "500m"
            requests:
              memory: "200Mi"
              cpu: "100m"
          readinessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:9003"]
            initialDelaySeconds: 150
          livenessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:9003"]
            initialDelaySeconds: 
            periodSeconds: 60
      
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-sitewhere-asset-management-svc
  labels:
    app.kubernetes.io/name: sitewhere
    helm.sh/chart: sitewhere-0.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Tiller
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - port: 9000
      targetPort: 9000
      protocol: TCP
      name: grpc-api
    - port: 9001
      targetPort: 9001
      protocol: TCP
      name: grpc-management
    - port: 9090
      targetPort: 9090
      protocol: TCP
      name: http-metrics
  selector:
    app.kubernetes.io/name: sitewhere-asset-management
    app.kubernetes.io/instance: release-name
---
# Source: sitewhere/templates/Batch-Operations.yaml


apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-sitewhere-batch-operations
  labels:
    app.kubernetes.io/name: sitewhere
    helm.sh/chart: sitewhere-0.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Tiller
    sitewhere.io/role: "microservice"
    sitewhere.io/name: "batch-operations"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sitewhere-batch-operations
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sitewhere-batch-operations
        app.kubernetes.io/instance: release-name
        sitewhere.io/role: "microservice"
        sitewhere.io/name: "batch-operations"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/scheme: "http"
        prometheus.io/port: "9090"
    spec:
      containers:
        - name: sitewhere-batch-operations          
          image: "docker.io/sitewhere/service-batch-operations:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9000
            - containerPort: 9001
            - containerPort: 9090
          env:
            - name: "sitewhere.k8s.pod.ip"
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: "sitewhere.namespace"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: "sitewhere.instance.id"
              value: "release-name"
            - name: "sitewhere.metrics.port"
              value: "9090"
            - name: "sitewhere.zookeeper.host"
              value: "release-name-cp-zookeeper"
            - name: "sitewhere.zookeeper.port"
              value: "2181"
            - name: "sitewhere.kafka.bootstrap.servers"
              value: "release-name-cp-kafka:9092"
            - name: "sitewhere.kafka.defaultTopicReplicationFactor"
              value: "3"
            - name: "sitewhere.grpc.maxRetryCount"
              value: "7"
            - name: "sitewhere.grpc.initialBackoffSeconds"
              value: "11"
            - name: "sitewhere.grpc.maxBackoffSeconds"
              value: "700"
            - name: "sitewhere.grpc.backoffMultiplier"
              value: "1.6"
            - name: "sitewhere.grpc.resolveFQDN"
              value: "false"
            - name: "mqtt.host"
              value: "release-name-sitewhere-mosquitto-svc"
            - name: "mongodb.host"
              value: "release-name-mongodb"
            - name: "mongodb.replicaset"
              value: "rs0"
            - name: "tenantsdb.url"
              value: "jdbc:postgresql://sitewhere-tenantsdb-headless.default.svc.cluster.local/tenantsdb"
            - name: "tenantsdb.username"
              value: "sitewhere"
            - name: "tenantsdb.password"
              valueFrom:
                secretKeyRef:
                  name: sitewhere-tenantsdb
                  key: postgresql-password
            - name: "warp10.url"
              value: "http://release-name-sitewhere-warp10-headless.default.svc.cluster.local:8080/api/v0"
            - name: "LOGGING_LEVEL_SITEWHERE"
              value: "INFO"
            - name: "LOGGING_LEVEL_SITEWHERE_GRPC"
              value: "INFO"
            - name: "LOGGING_LEVEL_SITEWHERE_KAFKA"
              value: "INFO"
            - name: "LOGGING_LEVEL_GRPC_INTERNAL"
              value: "ERROR"
            - name: "LOGGING_LEVEL_SPRING_BOOT"
              value: "INFO"
            - name: "LOGGING_LEVEL_SPRING_CONTEXT"
              value: "INFO"
            - name: "LOGGING_LEVEL_SPRING_SECURITY"
              value: "INFO"
            - name: "LOGGING_LEVEL_KAFKA"
              value: "ERROR"
            - name: "LOGGING_LEVEL_ZOOKEEPER"
              value: "ERROR"
            - name: "LOGGING_LEVEL_MONGODB"
              value: "WARN"
          resources:
            limits:
              memory: "800Mi" 
              cpu: "500m"
            requests:
              memory: "200Mi"
              cpu: "100m"
          readinessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:9003"]
            initialDelaySeconds: 150
          livenessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:9003"]
            initialDelaySeconds: 
            periodSeconds: 60
      
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-sitewhere-batch-operations-svc
  labels:
    app.kubernetes.io/name: sitewhere
    helm.sh/chart: sitewhere-0.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Tiller
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - port: 9000
      targetPort: 9000
      protocol: TCP
      name: grpc-api
    - port: 9001
      targetPort: 9001
      protocol: TCP
      name: grpc-management
    - port: 9090
      targetPort: 9090
      protocol: TCP
      name: http-metrics
  selector:
    app.kubernetes.io/name: sitewhere-batch-operations
    app.kubernetes.io/instance: release-name
---
# Source: sitewhere/templates/Command-Delivery.yaml


apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-sitewhere-command-delivery
  labels:
    app.kubernetes.io/name: sitewhere
    helm.sh/chart: sitewhere-0.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Tiller
    sitewhere.io/role: "microservice"
    sitewhere.io/name: "command-delivery"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sitewhere-command-delivery
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sitewhere-command-delivery
        app.kubernetes.io/instance: release-name
        sitewhere.io/role: "microservice"
        sitewhere.io/name: "command-delivery"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/scheme: "http"
        prometheus.io/port: "9090"
    spec:
      containers:
        - name: sitewhere-command-delivery          
          image: "docker.io/sitewhere/service-command-delivery:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9001
            - containerPort: 9090
          env:
            - name: "sitewhere.k8s.pod.ip"
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: "sitewhere.namespace"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: "sitewhere.instance.id"
              value: "release-name"
            - name: "sitewhere.metrics.port"
              value: "9090"
            - name: "sitewhere.zookeeper.host"
              value: "release-name-cp-zookeeper"
            - name: "sitewhere.zookeeper.port"
              value: "2181"
            - name: "sitewhere.kafka.bootstrap.servers"
              value: "release-name-cp-kafka:9092"
            - name: "sitewhere.kafka.defaultTopicReplicationFactor"
              value: "3"
            - name: "sitewhere.grpc.maxRetryCount"
              value: "7"
            - name: "sitewhere.grpc.initialBackoffSeconds"
              value: "11"
            - name: "sitewhere.grpc.maxBackoffSeconds"
              value: "700"
            - name: "sitewhere.grpc.backoffMultiplier"
              value: "1.6"
            - name: "sitewhere.grpc.resolveFQDN"
              value: "false"
            - name: "mqtt.host"
              value: "release-name-sitewhere-mosquitto-svc"
            - name: "mongodb.host"
              value: "release-name-mongodb"
            - name: "mongodb.replicaset"
              value: "rs0"
            - name: "tenantsdb.url"
              value: "jdbc:postgresql://sitewhere-tenantsdb-headless.default.svc.cluster.local/tenantsdb"
            - name: "tenantsdb.username"
              value: "sitewhere"
            - name: "tenantsdb.password"
              valueFrom:
                secretKeyRef:
                  name: sitewhere-tenantsdb
                  key: postgresql-password
            - name: "warp10.url"
              value: "http://release-name-sitewhere-warp10-headless.default.svc.cluster.local:8080/api/v0"
            - name: "LOGGING_LEVEL_SITEWHERE"
              value: "INFO"
            - name: "LOGGING_LEVEL_SITEWHERE_GRPC"
              value: "INFO"
            - name: "LOGGING_LEVEL_SITEWHERE_KAFKA"
              value: "INFO"
            - name: "LOGGING_LEVEL_GRPC_INTERNAL"
              value: "ERROR"
            - name: "LOGGING_LEVEL_SPRING_BOOT"
              value: "INFO"
            - name: "LOGGING_LEVEL_SPRING_CONTEXT"
              value: "INFO"
            - name: "LOGGING_LEVEL_SPRING_SECURITY"
              value: "INFO"
            - name: "LOGGING_LEVEL_KAFKA"
              value: "ERROR"
            - name: "LOGGING_LEVEL_ZOOKEEPER"
              value: "ERROR"
            - name: "LOGGING_LEVEL_MONGODB"
              value: "WARN"
          resources:
            limits:
              memory: "800Mi" 
              cpu: "500m"
            requests:
              memory: "200Mi"
              cpu: "100m"
          readinessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:9003"]
            initialDelaySeconds: 150
          livenessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:9003"]
            initialDelaySeconds: 
            periodSeconds: 60
      
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-sitewhere-command-delivery-svc
  labels:
    app.kubernetes.io/name: sitewhere
    helm.sh/chart: sitewhere-0.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Tiller
spec:
  type: ClusterIP
  ports:
    - port: 9001
      targetPort: 9001
      protocol: TCP
      name: grpc-management
    - port: 9090
      targetPort: 9090
      protocol: TCP
      name: http-metrics
  selector:
    app.kubernetes.io/name: sitewhere-command-delivery
    app.kubernetes.io/instance: release-name

---
# Source: sitewhere/templates/Device-Management.yaml


apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-sitewhere-device-management
  labels:
    app.kubernetes.io/name: sitewhere
    helm.sh/chart: sitewhere-0.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Tiller
    sitewhere.io/role: "microservice"
    sitewhere.io/name: "device-management"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sitewhere-device-management
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sitewhere-device-management
        app.kubernetes.io/instance: release-name
        sitewhere.io/role: "microservice"
        sitewhere.io/name: "device-management"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/scheme: "http"
        prometheus.io/port: "9090"
    spec:
      containers:
        - name: sitewhere-device-management          
          image: "docker.io/sitewhere/service-device-management:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9000
            - containerPort: 9001
            - containerPort: 9090
          env:
            - name: "sitewhere.k8s.pod.ip"
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: "sitewhere.namespace"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: "sitewhere.instance.id"
              value: "release-name"
            - name: "sitewhere.metrics.port"
              value: "9090"
            - name: "sitewhere.zookeeper.host"
              value: "release-name-cp-zookeeper"
            - name: "sitewhere.zookeeper.port"
              value: "2181"
            - name: "sitewhere.kafka.bootstrap.servers"
              value: "release-name-cp-kafka:9092"
            - name: "sitewhere.kafka.defaultTopicReplicationFactor"
              value: "3"
            - name: "sitewhere.grpc.maxRetryCount"
              value: "7"
            - name: "sitewhere.grpc.initialBackoffSeconds"
              value: "11"
            - name: "sitewhere.grpc.maxBackoffSeconds"
              value: "700"
            - name: "sitewhere.grpc.backoffMultiplier"
              value: "1.6"
            - name: "sitewhere.grpc.resolveFQDN"
              value: "false"
            - name: "mqtt.host"
              value: "release-name-sitewhere-mosquitto-svc"
            - name: "mongodb.host"
              value: "release-name-mongodb"
            - name: "mongodb.replicaset"
              value: "rs0"
            - name: "tenantsdb.url"
              value: "jdbc:postgresql://sitewhere-tenantsdb-headless.default.svc.cluster.local/tenantsdb"
            - name: "tenantsdb.username"
              value: "sitewhere"
            - name: "tenantsdb.password"
              valueFrom:
                secretKeyRef:
                  name: sitewhere-tenantsdb
                  key: postgresql-password
            - name: "warp10.url"
              value: "http://release-name-sitewhere-warp10-headless.default.svc.cluster.local:8080/api/v0"
            - name: "LOGGING_LEVEL_SITEWHERE"
              value: "INFO"
            - name: "LOGGING_LEVEL_SITEWHERE_GRPC"
              value: "INFO"
            - name: "LOGGING_LEVEL_SITEWHERE_KAFKA"
              value: "INFO"
            - name: "LOGGING_LEVEL_GRPC_INTERNAL"
              value: "ERROR"
            - name: "LOGGING_LEVEL_SPRING_BOOT"
              value: "INFO"
            - name: "LOGGING_LEVEL_SPRING_CONTEXT"
              value: "INFO"
            - name: "LOGGING_LEVEL_SPRING_SECURITY"
              value: "INFO"
            - name: "LOGGING_LEVEL_KAFKA"
              value: "ERROR"
            - name: "LOGGING_LEVEL_ZOOKEEPER"
              value: "ERROR"
            - name: "LOGGING_LEVEL_MONGODB"
              value: "WARN"
          resources:
            limits:
              memory: "800Mi" 
              cpu: "500m"
            requests:
              memory: "200Mi"
              cpu: "100m"
          readinessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:9003"]
            initialDelaySeconds: 150
          livenessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:9003"]
            initialDelaySeconds: 
            periodSeconds: 60
      
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-sitewhere-device-management-svc
  labels:
    app.kubernetes.io/name: sitewhere
    helm.sh/chart: sitewhere-0.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Tiller
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - port: 9000
      targetPort: 9000
      protocol: TCP
      name: grpc-api
    - port: 9001
      targetPort: 9001
      protocol: TCP
      name: grpc-management
    - port: 9090
      targetPort: 9090
      protocol: TCP
      name: http-metrics
  selector:
    app.kubernetes.io/name: sitewhere-device-management
    app.kubernetes.io/instance: release-name

---
# Source: sitewhere/templates/Device-Registration.yaml


apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-sitewhere-device-registration
  labels:
    app.kubernetes.io/name: sitewhere
    helm.sh/chart: sitewhere-0.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Tiller
    sitewhere.io/role: "microservice"
    sitewhere.io/name: "device-registration"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sitewhere-device-registration
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sitewhere-device-registration
        app.kubernetes.io/instance: release-name
        sitewhere.io/role: "microservice"
        sitewhere.io/name: "device-registration"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/scheme: "http"
        prometheus.io/port: "9090"
    spec:
      containers:
        - name: sitewhere-device-registration          
          image: "docker.io/sitewhere/service-device-registration:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9001
            - containerPort: 9090
          env:
            - name: "sitewhere.k8s.pod.ip"
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: "sitewhere.namespace"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: "sitewhere.instance.id"
              value: "release-name"
            - name: "sitewhere.metrics.port"
              value: "9090"
            - name: "sitewhere.zookeeper.host"
              value: "release-name-cp-zookeeper"
            - name: "sitewhere.zookeeper.port"
              value: "2181"
            - name: "sitewhere.kafka.bootstrap.servers"
              value: "release-name-cp-kafka:9092"
            - name: "sitewhere.kafka.defaultTopicReplicationFactor"
              value: "3"
            - name: "sitewhere.grpc.maxRetryCount"
              value: "7"
            - name: "sitewhere.grpc.initialBackoffSeconds"
              value: "11"
            - name: "sitewhere.grpc.maxBackoffSeconds"
              value: "700"
            - name: "sitewhere.grpc.backoffMultiplier"
              value: "1.6"
            - name: "sitewhere.grpc.resolveFQDN"
              value: "false"
            - name: "mqtt.host"
              value: "release-name-sitewhere-mosquitto-svc"
            - name: "mongodb.host"
              value: "release-name-mongodb"
            - name: "mongodb.replicaset"
              value: "rs0"
            - name: "tenantsdb.url"
              value: "jdbc:postgresql://sitewhere-tenantsdb-headless.default.svc.cluster.local/tenantsdb"
            - name: "tenantsdb.username"
              value: "sitewhere"
            - name: "tenantsdb.password"
              valueFrom:
                secretKeyRef:
                  name: sitewhere-tenantsdb
                  key: postgresql-password
            - name: "warp10.url"
              value: "http://release-name-sitewhere-warp10-headless.default.svc.cluster.local:8080/api/v0"
            - name: "LOGGING_LEVEL_SITEWHERE"
              value: "INFO"
            - name: "LOGGING_LEVEL_SITEWHERE_GRPC"
              value: "INFO"
            - name: "LOGGING_LEVEL_SITEWHERE_KAFKA"
              value: "INFO"
            - name: "LOGGING_LEVEL_GRPC_INTERNAL"
              value: "ERROR"
            - name: "LOGGING_LEVEL_SPRING_BOOT"
              value: "INFO"
            - name: "LOGGING_LEVEL_SPRING_CONTEXT"
              value: "INFO"
            - name: "LOGGING_LEVEL_SPRING_SECURITY"
              value: "INFO"
            - name: "LOGGING_LEVEL_KAFKA"
              value: "ERROR"
            - name: "LOGGING_LEVEL_ZOOKEEPER"
              value: "ERROR"
            - name: "LOGGING_LEVEL_MONGODB"
              value: "WARN"
          resources:
            limits:
              memory: "800Mi" 
              cpu: "500m"
            requests:
              memory: "200Mi"
              cpu: "100m"
          readinessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:9003"]
            initialDelaySeconds: 150
          livenessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:9003"]
            initialDelaySeconds: 
            periodSeconds: 60
      
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-sitewhere-device-registration-svc
  labels:
    app.kubernetes.io/name: sitewhere
    helm.sh/chart: sitewhere-0.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Tiller
spec:
  type: ClusterIP
  ports:
    - port: 9001
      targetPort: 9001
      protocol: TCP
      name: grpc-management
    - port: 9090
      targetPort: 9090
      protocol: TCP
      name: http-metrics
  selector:
    app.kubernetes.io/name: sitewhere-device-registration
    app.kubernetes.io/instance: release-name

---
# Source: sitewhere/templates/Device-State.yaml


apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-sitewhere-device-state
  labels:
    app.kubernetes.io/name: sitewhere
    helm.sh/chart: sitewhere-0.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Tiller
    sitewhere.io/role: "microservice"
    sitewhere.io/name: "device-state"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sitewhere-device-state
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sitewhere-device-state
        app.kubernetes.io/instance: release-name
        sitewhere.io/role: "microservice"
        sitewhere.io/name: "device-state"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/scheme: "http"
        prometheus.io/port: "9090"
    spec:
      containers:
        - name: sitewhere-device-state          
          image: "docker.io/sitewhere/service-device-state:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9000
            - containerPort: 9001
            - containerPort: 9090
          env:
            - name: "sitewhere.k8s.pod.ip"
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: "sitewhere.namespace"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: "sitewhere.instance.id"
              value: "release-name"
            - name: "sitewhere.metrics.port"
              value: "9090"
            - name: "sitewhere.zookeeper.host"
              value: "release-name-cp-zookeeper"
            - name: "sitewhere.zookeeper.port"
              value: "2181"
            - name: "sitewhere.kafka.bootstrap.servers"
              value: "release-name-cp-kafka:9092"
            - name: "sitewhere.kafka.defaultTopicReplicationFactor"
              value: "3"
            - name: "sitewhere.grpc.maxRetryCount"
              value: "7"
            - name: "sitewhere.grpc.initialBackoffSeconds"
              value: "11"
            - name: "sitewhere.grpc.maxBackoffSeconds"
              value: "700"
            - name: "sitewhere.grpc.backoffMultiplier"
              value: "1.6"
            - name: "sitewhere.grpc.resolveFQDN"
              value: "false"
            - name: "mqtt.host"
              value: "release-name-sitewhere-mosquitto-svc"
            - name: "mongodb.host"
              value: "release-name-mongodb"
            - name: "mongodb.replicaset"
              value: "rs0"
            - name: "tenantsdb.url"
              value: "jdbc:postgresql://sitewhere-tenantsdb-headless.default.svc.cluster.local/tenantsdb"
            - name: "tenantsdb.username"
              value: "sitewhere"
            - name: "tenantsdb.password"
              valueFrom:
                secretKeyRef:
                  name: sitewhere-tenantsdb
                  key: postgresql-password
            - name: "warp10.url"
              value: "http://release-name-sitewhere-warp10-headless.default.svc.cluster.local:8080/api/v0"
            - name: "LOGGING_LEVEL_SITEWHERE"
              value: "INFO"
            - name: "LOGGING_LEVEL_SITEWHERE_GRPC"
              value: "INFO"
            - name: "LOGGING_LEVEL_SITEWHERE_KAFKA"
              value: "INFO"
            - name: "LOGGING_LEVEL_GRPC_INTERNAL"
              value: "ERROR"
            - name: "LOGGING_LEVEL_SPRING_BOOT"
              value: "INFO"
            - name: "LOGGING_LEVEL_SPRING_CONTEXT"
              value: "INFO"
            - name: "LOGGING_LEVEL_SPRING_SECURITY"
              value: "INFO"
            - name: "LOGGING_LEVEL_KAFKA"
              value: "ERROR"
            - name: "LOGGING_LEVEL_ZOOKEEPER"
              value: "ERROR"
            - name: "LOGGING_LEVEL_MONGODB"
              value: "WARN"
          resources:
            limits:
              memory: "800Mi" 
              cpu: "500m"
            requests:
              memory: "200Mi"
              cpu: "100m"
          readinessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:9003"]
            initialDelaySeconds: 150
          livenessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:9003"]
            initialDelaySeconds: 
            periodSeconds: 60
      
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-sitewhere-device-state-svc
  labels:
    app.kubernetes.io/name: sitewhere
    helm.sh/chart: sitewhere-0.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Tiller
spec:
  type: ClusterIP
  ports:
    - port: 9000
      targetPort: 9000
      protocol: TCP
      name: grpc-api
    - port: 9001
      targetPort: 9001
      protocol: TCP
      name: grpc-management
    - port: 9090
      targetPort: 9090
      protocol: TCP
      name: http-metrics
  selector:
    app.kubernetes.io/name: sitewhere-device-state
    app.kubernetes.io/instance: release-name

---
# Source: sitewhere/templates/Event-Management.yaml


apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-sitewhere-event-management
  labels:
    app.kubernetes.io/name: sitewhere
    helm.sh/chart: sitewhere-0.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Tiller
    sitewhere.io/role: "microservice"
    sitewhere.io/name: "event-management"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sitewhere-event-management
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sitewhere-event-management
        app.kubernetes.io/instance: release-name
        sitewhere.io/role: "microservice"
        sitewhere.io/name: "event-management"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/scheme: "http"
        prometheus.io/port: "9090"
    spec:
      containers:
        - name: sitewhere-event-management          
          image: "docker.io/sitewhere/service-event-management:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9000
            - containerPort: 9001
            - containerPort: 9090
          env:
            - name: "sitewhere.k8s.pod.ip"
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: "sitewhere.namespace"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: "sitewhere.instance.id"
              value: "release-name"
            - name: "sitewhere.metrics.port"
              value: "9090"
            - name: "sitewhere.zookeeper.host"
              value: "release-name-cp-zookeeper"
            - name: "sitewhere.zookeeper.port"
              value: "2181"
            - name: "sitewhere.kafka.bootstrap.servers"
              value: "release-name-cp-kafka:9092"
            - name: "sitewhere.kafka.defaultTopicReplicationFactor"
              value: "3"
            - name: "sitewhere.grpc.maxRetryCount"
              value: "7"
            - name: "sitewhere.grpc.initialBackoffSeconds"
              value: "11"
            - name: "sitewhere.grpc.maxBackoffSeconds"
              value: "700"
            - name: "sitewhere.grpc.backoffMultiplier"
              value: "1.6"
            - name: "sitewhere.grpc.resolveFQDN"
              value: "false"
            - name: "mqtt.host"
              value: "release-name-sitewhere-mosquitto-svc"
            - name: "mongodb.host"
              value: "release-name-mongodb"
            - name: "mongodb.replicaset"
              value: "rs0"
            - name: "tenantsdb.url"
              value: "jdbc:postgresql://sitewhere-tenantsdb-headless.default.svc.cluster.local/tenantsdb"
            - name: "tenantsdb.username"
              value: "sitewhere"
            - name: "tenantsdb.password"
              valueFrom:
                secretKeyRef:
                  name: sitewhere-tenantsdb
                  key: postgresql-password
            - name: "warp10.url"
              value: "http://release-name-sitewhere-warp10-headless.default.svc.cluster.local:8080/api/v0"
            - name: "LOGGING_LEVEL_SITEWHERE"
              value: "INFO"
            - name: "LOGGING_LEVEL_SITEWHERE_GRPC"
              value: "INFO"
            - name: "LOGGING_LEVEL_SITEWHERE_KAFKA"
              value: "INFO"
            - name: "LOGGING_LEVEL_GRPC_INTERNAL"
              value: "ERROR"
            - name: "LOGGING_LEVEL_SPRING_BOOT"
              value: "INFO"
            - name: "LOGGING_LEVEL_SPRING_CONTEXT"
              value: "INFO"
            - name: "LOGGING_LEVEL_SPRING_SECURITY"
              value: "INFO"
            - name: "LOGGING_LEVEL_KAFKA"
              value: "ERROR"
            - name: "LOGGING_LEVEL_ZOOKEEPER"
              value: "ERROR"
            - name: "LOGGING_LEVEL_MONGODB"
              value: "WARN"
          resources:
            limits:
              memory: "800Mi" 
              cpu: "500m"
            requests:
              memory: "200Mi"
              cpu: "100m"
          readinessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:9003"]
            initialDelaySeconds: 150
          livenessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:9003"]
            initialDelaySeconds: 
            periodSeconds: 60
      
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-sitewhere-event-management-svc
  labels:
    app.kubernetes.io/name: sitewhere
    helm.sh/chart: sitewhere-0.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Tiller
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - port: 9000
      targetPort: 9000
      protocol: TCP
      name: grpc-api
    - port: 9001
      targetPort: 9001
      protocol: TCP
      name: grpc-management
    - port: 9090
      targetPort: 9090
      protocol: TCP
      name: http-metrics
  selector:
    app.kubernetes.io/name: sitewhere-event-management
    app.kubernetes.io/instance: release-name

---
# Source: sitewhere/templates/Event-Search.yaml


apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-sitewhere-event-search
  labels:
    app.kubernetes.io/name: sitewhere
    helm.sh/chart: sitewhere-0.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Tiller
    sitewhere.io/role: "microservice"
    sitewhere.io/name: "event-search"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sitewhere-event-search
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sitewhere-event-search
        app.kubernetes.io/instance: release-name
        sitewhere.io/role: "microservice"
        sitewhere.io/name: "event-search"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/scheme: "http"
        prometheus.io/port: "9090"
    spec:
      containers:
        - name: sitewhere-event-search          
          image: "docker.io/sitewhere/service-event-search:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9000
            - containerPort: 9001
            - containerPort: 9090
          env:
            - name: "sitewhere.k8s.pod.ip"
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: "sitewhere.namespace"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: "sitewhere.instance.id"
              value: "release-name"
            - name: "sitewhere.metrics.port"
              value: "9090"
            - name: "sitewhere.zookeeper.host"
              value: "release-name-cp-zookeeper"
            - name: "sitewhere.zookeeper.port"
              value: "2181"
            - name: "sitewhere.kafka.bootstrap.servers"
              value: "release-name-cp-kafka:9092"
            - name: "sitewhere.kafka.defaultTopicReplicationFactor"
              value: "3"
            - name: "sitewhere.grpc.maxRetryCount"
              value: "7"
            - name: "sitewhere.grpc.initialBackoffSeconds"
              value: "11"
            - name: "sitewhere.grpc.maxBackoffSeconds"
              value: "700"
            - name: "sitewhere.grpc.backoffMultiplier"
              value: "1.6"
            - name: "sitewhere.grpc.resolveFQDN"
              value: "false"
            - name: "mqtt.host"
              value: "release-name-sitewhere-mosquitto-svc"
            - name: "mongodb.host"
              value: "release-name-mongodb"
            - name: "mongodb.replicaset"
              value: "rs0"
            - name: "tenantsdb.url"
              value: "jdbc:postgresql://sitewhere-tenantsdb-headless.default.svc.cluster.local/tenantsdb"
            - name: "tenantsdb.username"
              value: "sitewhere"
            - name: "tenantsdb.password"
              valueFrom:
                secretKeyRef:
                  name: sitewhere-tenantsdb
                  key: postgresql-password
            - name: "warp10.url"
              value: "http://release-name-sitewhere-warp10-headless.default.svc.cluster.local:8080/api/v0"
            - name: "LOGGING_LEVEL_SITEWHERE"
              value: "INFO"
            - name: "LOGGING_LEVEL_SITEWHERE_GRPC"
              value: "INFO"
            - name: "LOGGING_LEVEL_SITEWHERE_KAFKA"
              value: "INFO"
            - name: "LOGGING_LEVEL_GRPC_INTERNAL"
              value: "ERROR"
            - name: "LOGGING_LEVEL_SPRING_BOOT"
              value: "INFO"
            - name: "LOGGING_LEVEL_SPRING_CONTEXT"
              value: "INFO"
            - name: "LOGGING_LEVEL_SPRING_SECURITY"
              value: "INFO"
            - name: "LOGGING_LEVEL_KAFKA"
              value: "ERROR"
            - name: "LOGGING_LEVEL_ZOOKEEPER"
              value: "ERROR"
            - name: "LOGGING_LEVEL_MONGODB"
              value: "WARN"
          resources:
            limits:
              memory: "800Mi" 
              cpu: "500m"
            requests:
              memory: "200Mi"
              cpu: "100m"
          readinessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:9003"]
            initialDelaySeconds: 150
          livenessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:9003"]
            initialDelaySeconds: 
            periodSeconds: 60
      
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-sitewhere-event-search-svc
  labels:
    app.kubernetes.io/name: sitewhere
    helm.sh/chart: sitewhere-0.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Tiller
spec:
  type: ClusterIP
  ports:
    - port: 9000
      targetPort: 9000
      protocol: TCP
      name: grpc-api
    - port: 9001
      targetPort: 9001
      protocol: TCP
      name: grpc-management
    - port: 9090
      targetPort: 9090
      protocol: TCP
      name: http-metrics
  selector:
    app.kubernetes.io/name: sitewhere-event-search
    app.kubernetes.io/instance: release-name

---
# Source: sitewhere/templates/Event-Sources.yaml


apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-sitewhere-event-sources
  labels:
    app.kubernetes.io/name: sitewhere
    helm.sh/chart: sitewhere-0.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Tiller
    sitewhere.io/role: "microservice"
    sitewhere.io/name: "event-sources"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sitewhere-event-sources
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sitewhere-event-sources
        app.kubernetes.io/instance: release-name
        sitewhere.io/role: "microservice"
        sitewhere.io/name: "event-sources"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/scheme: "http"
        prometheus.io/port: "9090"
    spec:
      containers:
        - name: sitewhere-event-sources          
          image: "docker.io/sitewhere/service-event-sources:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9001
            - containerPort: 9090
          env:
            - name: "sitewhere.k8s.pod.ip"
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: "sitewhere.namespace"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: "sitewhere.instance.id"
              value: "release-name"
            - name: "sitewhere.metrics.port"
              value: "9090"
            - name: "sitewhere.zookeeper.host"
              value: "release-name-cp-zookeeper"
            - name: "sitewhere.zookeeper.port"
              value: "2181"
            - name: "sitewhere.kafka.bootstrap.servers"
              value: "release-name-cp-kafka:9092"
            - name: "sitewhere.kafka.defaultTopicReplicationFactor"
              value: "3"
            - name: "sitewhere.grpc.maxRetryCount"
              value: "7"
            - name: "sitewhere.grpc.initialBackoffSeconds"
              value: "11"
            - name: "sitewhere.grpc.maxBackoffSeconds"
              value: "700"
            - name: "sitewhere.grpc.backoffMultiplier"
              value: "1.6"
            - name: "sitewhere.grpc.resolveFQDN"
              value: "false"
            - name: "mqtt.host"
              value: "release-name-sitewhere-mosquitto-svc"
            - name: "mongodb.host"
              value: "release-name-mongodb"
            - name: "mongodb.replicaset"
              value: "rs0"
            - name: "tenantsdb.url"
              value: "jdbc:postgresql://sitewhere-tenantsdb-headless.default.svc.cluster.local/tenantsdb"
            - name: "tenantsdb.username"
              value: "sitewhere"
            - name: "tenantsdb.password"
              valueFrom:
                secretKeyRef:
                  name: sitewhere-tenantsdb
                  key: postgresql-password
            - name: "warp10.url"
              value: "http://release-name-sitewhere-warp10-headless.default.svc.cluster.local:8080/api/v0"
            - name: "LOGGING_LEVEL_SITEWHERE"
              value: "INFO"
            - name: "LOGGING_LEVEL_SITEWHERE_GRPC"
              value: "INFO"
            - name: "LOGGING_LEVEL_SITEWHERE_KAFKA"
              value: "INFO"
            - name: "LOGGING_LEVEL_GRPC_INTERNAL"
              value: "ERROR"
            - name: "LOGGING_LEVEL_SPRING_BOOT"
              value: "INFO"
            - name: "LOGGING_LEVEL_SPRING_CONTEXT"
              value: "INFO"
            - name: "LOGGING_LEVEL_SPRING_SECURITY"
              value: "INFO"
            - name: "LOGGING_LEVEL_KAFKA"
              value: "ERROR"
            - name: "LOGGING_LEVEL_ZOOKEEPER"
              value: "ERROR"
            - name: "LOGGING_LEVEL_MONGODB"
              value: "WARN"
          resources:
            limits:
              memory: "800Mi" 
              cpu: "500m"
            requests:
              memory: "200Mi"
              cpu: "100m"
          readinessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:9003"]
            initialDelaySeconds: 150
          livenessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:9003"]
            initialDelaySeconds: 
            periodSeconds: 60
      
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-sitewhere-event-sources-svc
  labels:
    app.kubernetes.io/name: sitewhere
    helm.sh/chart: sitewhere-0.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Tiller
spec:
  type: ClusterIP
  ports:
    - port: 9001
      targetPort: 9001
      protocol: TCP
      name: grpc-management
    - port: 9090
      targetPort: 9090
      protocol: TCP
      name: http-metrics
  selector:
    app.kubernetes.io/name: sitewhere-event-sources
    app.kubernetes.io/instance: release-name

---
# Source: sitewhere/templates/Inbound-Processing.yaml


apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-sitewhere-inbound-processing
  labels:
    app.kubernetes.io/name: sitewhere
    helm.sh/chart: sitewhere-0.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Tiller
    sitewhere.io/role: "microservice"
    sitewhere.io/name: "inbound-processing"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sitewhere-inbound-processing
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sitewhere-inbound-processing
        app.kubernetes.io/instance: release-name
        sitewhere.io/role: "microservice"
        sitewhere.io/name: "inbound-processing"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/scheme: "http"
        prometheus.io/port: "9090"
    spec:
      containers:
        - name: sitewhere-inbound-processing          
          image: "docker.io/sitewhere/service-inbound-processing:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9001
            - containerPort: 9090
          env:
            - name: "sitewhere.k8s.pod.ip"
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: "sitewhere.namespace"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: "sitewhere.instance.id"
              value: "release-name"
            - name: "sitewhere.metrics.port"
              value: "9090"
            - name: "sitewhere.zookeeper.host"
              value: "release-name-cp-zookeeper"
            - name: "sitewhere.zookeeper.port"
              value: "2181"
            - name: "sitewhere.kafka.bootstrap.servers"
              value: "release-name-cp-kafka:9092"
            - name: "sitewhere.kafka.defaultTopicReplicationFactor"
              value: "3"
            - name: "sitewhere.grpc.maxRetryCount"
              value: "7"
            - name: "sitewhere.grpc.initialBackoffSeconds"
              value: "11"
            - name: "sitewhere.grpc.maxBackoffSeconds"
              value: "700"
            - name: "sitewhere.grpc.backoffMultiplier"
              value: "1.6"
            - name: "sitewhere.grpc.resolveFQDN"
              value: "false"
            - name: "mqtt.host"
              value: "release-name-sitewhere-mosquitto-svc"
            - name: "mongodb.host"
              value: "release-name-mongodb"
            - name: "mongodb.replicaset"
              value: "rs0"
            - name: "tenantsdb.url"
              value: "jdbc:postgresql://sitewhere-tenantsdb-headless.default.svc.cluster.local/tenantsdb"
            - name: "tenantsdb.username"
              value: "sitewhere"
            - name: "tenantsdb.password"
              valueFrom:
                secretKeyRef:
                  name: sitewhere-tenantsdb
                  key: postgresql-password
            - name: "warp10.url"
              value: "http://release-name-sitewhere-warp10-headless.default.svc.cluster.local:8080/api/v0"
            - name: "LOGGING_LEVEL_SITEWHERE"
              value: "INFO"
            - name: "LOGGING_LEVEL_SITEWHERE_GRPC"
              value: "INFO"
            - name: "LOGGING_LEVEL_SITEWHERE_KAFKA"
              value: "INFO"
            - name: "LOGGING_LEVEL_GRPC_INTERNAL"
              value: "ERROR"
            - name: "LOGGING_LEVEL_SPRING_BOOT"
              value: "INFO"
            - name: "LOGGING_LEVEL_SPRING_CONTEXT"
              value: "INFO"
            - name: "LOGGING_LEVEL_SPRING_SECURITY"
              value: "INFO"
            - name: "LOGGING_LEVEL_KAFKA"
              value: "ERROR"
            - name: "LOGGING_LEVEL_ZOOKEEPER"
              value: "ERROR"
            - name: "LOGGING_LEVEL_MONGODB"
              value: "WARN"
          resources:
            limits:
              memory: "800Mi" 
              cpu: "500m"
            requests:
              memory: "200Mi"
              cpu: "100m"
          readinessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:9003"]
            initialDelaySeconds: 150
          livenessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:9003"]
            initialDelaySeconds: 
            periodSeconds: 60
      
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-sitewhere-inbound-processing-svc
  labels:
    app.kubernetes.io/name: sitewhere
    helm.sh/chart: sitewhere-0.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Tiller
spec:
  type: ClusterIP
  ports:
    - port: 9001
      targetPort: 9001
      protocol: TCP
      name: grpc-management
    - port: 9090
      targetPort: 9090
      protocol: TCP
      name: http-metrics
  selector:
    app.kubernetes.io/name: sitewhere-inbound-processing
    app.kubernetes.io/instance: release-name

---
# Source: sitewhere/templates/Instance-Management.yaml


apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-sitewhere-instance-management
  labels:
    app.kubernetes.io/name: sitewhere
    helm.sh/chart: sitewhere-0.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Tiller
    sitewhere.io/role: "microservice"
    sitewhere.io/name: "instance-management"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sitewhere-instance-management
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sitewhere-instance-management
        app.kubernetes.io/instance: release-name
        sitewhere.io/role: "microservice"
        sitewhere.io/name: "instance-management"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/scheme: "http"
        prometheus.io/port: "9090"
    spec:
      containers:
        - name: sitewhere-instance-management          
          image: "docker.io/sitewhere/service-instance-management:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9000
            - containerPort: 9001
            - containerPort: 9004
            - containerPort: 9005
            - containerPort: 9090
          env:
            - name: "sitewhere.k8s.pod.ip"
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: "sitewhere.namespace"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: "sitewhere.instance.id"
              value: "release-name"
            - name: "sitewhere.metrics.port"
              value: "9090"
            - name: "sitewhere.zookeeper.host"
              value: "release-name-cp-zookeeper"
            - name: "sitewhere.zookeeper.port"
              value: "2181"
            - name: "sitewhere.kafka.bootstrap.servers"
              value: "release-name-cp-kafka:9092"
            - name: "sitewhere.kafka.defaultTopicReplicationFactor"
              value: "3"
            - name: "sitewhere.grpc.maxRetryCount"
              value: "7"
            - name: "sitewhere.grpc.initialBackoffSeconds"
              value: "11"
            - name: "sitewhere.grpc.maxBackoffSeconds"
              value: "700"
            - name: "sitewhere.grpc.backoffMultiplier"
              value: "1.6"
            - name: "sitewhere.grpc.resolveFQDN"
              value: "false"
            - name: "mqtt.host"
              value: "release-name-sitewhere-mosquitto-svc"
            - name: "mongodb.host"
              value: "release-name-mongodb"
            - name: "mongodb.replicaset"
              value: "rs0"
            - name: "tenantsdb.url"
              value: "jdbc:postgresql://sitewhere-tenantsdb-headless.default.svc.cluster.local/tenantsdb"
            - name: "tenantsdb.username"
              value: "sitewhere"
            - name: "tenantsdb.password"
              valueFrom:
                secretKeyRef:
                  name: sitewhere-tenantsdb
                  key: postgresql-password
            - name: "warp10.url"
              value: "http://release-name-sitewhere-warp10-headless.default.svc.cluster.local:8080/api/v0"
            - name: "LOGGING_LEVEL_SITEWHERE"
              value: "INFO"
            - name: "LOGGING_LEVEL_SITEWHERE_GRPC"
              value: "INFO"
            - name: "LOGGING_LEVEL_SITEWHERE_KAFKA"
              value: "INFO"
            - name: "LOGGING_LEVEL_GRPC_INTERNAL"
              value: "ERROR"
            - name: "LOGGING_LEVEL_SPRING_BOOT"
              value: "INFO"
            - name: "LOGGING_LEVEL_SPRING_CONTEXT"
              value: "INFO"
            - name: "LOGGING_LEVEL_SPRING_SECURITY"
              value: "INFO"
            - name: "LOGGING_LEVEL_KAFKA"
              value: "ERROR"
            - name: "LOGGING_LEVEL_ZOOKEEPER"
              value: "ERROR"
            - name: "LOGGING_LEVEL_MONGODB"
              value: "WARN"
            - name: "sitewhere.syncope.host"
              value: "sitewhere-syncope"
            - name: "sitewhere.syncope.port"
              value: "8080"
          resources:
            limits:
              memory: "800Mi" 
              cpu: "500m"
            requests:
              memory: "200Mi"
              cpu: "100m"
          readinessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:9003"]
            initialDelaySeconds: 150
          livenessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:9003"]
            initialDelaySeconds: 
            periodSeconds: 60
      
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-sitewhere-instance-management-svc
  labels:
    app.kubernetes.io/name: sitewhere
    helm.sh/chart: sitewhere-0.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Tiller
spec:
  type: ClusterIP
  ports:
    - port: 9000
      targetPort: 9000
      protocol: TCP
      name: grpc-api
    - port: 9001
      targetPort: 9001
      protocol: TCP
      name: grpc-management
    - port: 9004
      targetPort: 9004
      protocol: TCP
      name: grpc-user-management
    - port: 9005
      targetPort: 9005
      protocol: TCP
      name: grpc-tenant-management
    - port: 9090
      targetPort: 9090
      protocol: TCP
      name: http-metrics
  selector:
    app.kubernetes.io/name: sitewhere-instance-management
    app.kubernetes.io/instance: release-name

---
# Source: sitewhere/templates/Label-Generation.yaml


apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-sitewhere-label-generation
  labels:
    app.kubernetes.io/name: sitewhere
    helm.sh/chart: sitewhere-0.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Tiller
    sitewhere.io/role: "microservice"
    sitewhere.io/name: "label-generation"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sitewhere-label-generation
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sitewhere-label-generation
        app.kubernetes.io/instance: release-name
        sitewhere.io/role: "microservice"
        sitewhere.io/name: "label-generation"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/scheme: "http"
        prometheus.io/port: "9090"
    spec:
      containers:
        - name: sitewhere-label-generation          
          image: "docker.io/sitewhere/service-label-generation:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9000
            - containerPort: 9001
            - containerPort: 9090
          env:
            - name: "sitewhere.k8s.pod.ip"
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: "sitewhere.namespace"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: "sitewhere.instance.id"
              value: "release-name"
            - name: "sitewhere.metrics.port"
              value: "9090"
            - name: "sitewhere.zookeeper.host"
              value: "release-name-cp-zookeeper"
            - name: "sitewhere.zookeeper.port"
              value: "2181"
            - name: "sitewhere.kafka.bootstrap.servers"
              value: "release-name-cp-kafka:9092"
            - name: "sitewhere.kafka.defaultTopicReplicationFactor"
              value: "3"
            - name: "sitewhere.grpc.maxRetryCount"
              value: "7"
            - name: "sitewhere.grpc.initialBackoffSeconds"
              value: "11"
            - name: "sitewhere.grpc.maxBackoffSeconds"
              value: "700"
            - name: "sitewhere.grpc.backoffMultiplier"
              value: "1.6"
            - name: "sitewhere.grpc.resolveFQDN"
              value: "false"
            - name: "mqtt.host"
              value: "release-name-sitewhere-mosquitto-svc"
            - name: "mongodb.host"
              value: "release-name-mongodb"
            - name: "mongodb.replicaset"
              value: "rs0"
            - name: "tenantsdb.url"
              value: "jdbc:postgresql://sitewhere-tenantsdb-headless.default.svc.cluster.local/tenantsdb"
            - name: "tenantsdb.username"
              value: "sitewhere"
            - name: "tenantsdb.password"
              valueFrom:
                secretKeyRef:
                  name: sitewhere-tenantsdb
                  key: postgresql-password
            - name: "warp10.url"
              value: "http://release-name-sitewhere-warp10-headless.default.svc.cluster.local:8080/api/v0"
            - name: "LOGGING_LEVEL_SITEWHERE"
              value: "INFO"
            - name: "LOGGING_LEVEL_SITEWHERE_GRPC"
              value: "INFO"
            - name: "LOGGING_LEVEL_SITEWHERE_KAFKA"
              value: "INFO"
            - name: "LOGGING_LEVEL_GRPC_INTERNAL"
              value: "ERROR"
            - name: "LOGGING_LEVEL_SPRING_BOOT"
              value: "INFO"
            - name: "LOGGING_LEVEL_SPRING_CONTEXT"
              value: "INFO"
            - name: "LOGGING_LEVEL_SPRING_SECURITY"
              value: "INFO"
            - name: "LOGGING_LEVEL_KAFKA"
              value: "ERROR"
            - name: "LOGGING_LEVEL_ZOOKEEPER"
              value: "ERROR"
            - name: "LOGGING_LEVEL_MONGODB"
              value: "WARN"
          resources:
            limits:
              memory: "800Mi" 
              cpu: "500m"
            requests:
              memory: "200Mi"
              cpu: "100m"
          readinessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:9003"]
            initialDelaySeconds: 150
          livenessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:9003"]
            initialDelaySeconds: 
            periodSeconds: 60
      
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-sitewhere-label-generation-svc
  labels:
    app.kubernetes.io/name: sitewhere
    helm.sh/chart: sitewhere-0.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Tiller
spec:
  type: ClusterIP
  ports:
    - port: 9000
      targetPort: 9000
      protocol: TCP
      name: grpc-api
    - port: 9001
      targetPort: 9001
      protocol: TCP
      name: grpc-management
    - port: 9090
      targetPort: 9090
      protocol: TCP
      name: http-metrics
  selector:
    app.kubernetes.io/name: sitewhere-label-generation
    app.kubernetes.io/instance: release-name

---
# Source: sitewhere/templates/Mosquitto.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-sitewhere-mosquitto
  labels:
    app.kubernetes.io/name: sitewhere
    helm.sh/chart: sitewhere-0.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Tiller
    sitewhere.io/role: "infrastructure"
    sitewhere.io/name: "mosquitto"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sitewhere-mosquitto
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
      labels:
        app.kubernetes.io/name: sitewhere-mosquitto
        app.kubernetes.io/instance: release-name
        sitewhere.io/role: "infrastructure"
        sitewhere.io/name: "mosquitto"
    spec:
      containers:
        - name: sitewhere-mosquitto
          image: "docker.io/eclipse-mosquitto:1.4.12"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 1883
              name: tcp-mosquitto
              protocol: TCP
      
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-sitewhere-mosquitto-svc
  labels:
    app.kubernetes.io/name: sitewhere
    helm.sh/chart: sitewhere-0.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Tiller
spec:
  type: LoadBalancer
  ports:
    - port: 1883
      targetPort: 1883
      protocol: TCP
      name: tcp-mosquitto
  selector:
    app.kubernetes.io/name: sitewhere-mosquitto
    app.kubernetes.io/instance: release-name


---
# Source: sitewhere/templates/Outbound-Connectors.yaml


apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-sitewhere-outbound-connectors
  labels:
    app.kubernetes.io/name: sitewhere
    helm.sh/chart: sitewhere-0.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Tiller
    sitewhere.io/role: "microservice"
    sitewhere.io/name: "outbound-connectors"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sitewhere-outbound-connectors
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sitewhere-outbound-connectors
        app.kubernetes.io/instance: release-name
        sitewhere.io/role: "microservice"
        sitewhere.io/name: "outbound-connectors"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/scheme: "http"
        prometheus.io/port: "9090"
    spec:
      containers:
        - name: sitewhere-outbound-connectors          
          image: "docker.io/sitewhere/service-outbound-connectors:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9001
            - containerPort: 9090
          env:
            - name: "sitewhere.k8s.pod.ip"
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: "sitewhere.namespace"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: "sitewhere.instance.id"
              value: "release-name"
            - name: "sitewhere.metrics.port"
              value: "9090"
            - name: "sitewhere.zookeeper.host"
              value: "release-name-cp-zookeeper"
            - name: "sitewhere.zookeeper.port"
              value: "2181"
            - name: "sitewhere.kafka.bootstrap.servers"
              value: "release-name-cp-kafka:9092"
            - name: "sitewhere.kafka.defaultTopicReplicationFactor"
              value: "3"
            - name: "sitewhere.grpc.maxRetryCount"
              value: "7"
            - name: "sitewhere.grpc.initialBackoffSeconds"
              value: "11"
            - name: "sitewhere.grpc.maxBackoffSeconds"
              value: "700"
            - name: "sitewhere.grpc.backoffMultiplier"
              value: "1.6"
            - name: "sitewhere.grpc.resolveFQDN"
              value: "false"
            - name: "mqtt.host"
              value: "release-name-sitewhere-mosquitto-svc"
            - name: "mongodb.host"
              value: "release-name-mongodb"
            - name: "mongodb.replicaset"
              value: "rs0"
            - name: "tenantsdb.url"
              value: "jdbc:postgresql://sitewhere-tenantsdb-headless.default.svc.cluster.local/tenantsdb"
            - name: "tenantsdb.username"
              value: "sitewhere"
            - name: "tenantsdb.password"
              valueFrom:
                secretKeyRef:
                  name: sitewhere-tenantsdb
                  key: postgresql-password
            - name: "warp10.url"
              value: "http://release-name-sitewhere-warp10-headless.default.svc.cluster.local:8080/api/v0"
            - name: "LOGGING_LEVEL_SITEWHERE"
              value: "INFO"
            - name: "LOGGING_LEVEL_SITEWHERE_GRPC"
              value: "INFO"
            - name: "LOGGING_LEVEL_SITEWHERE_KAFKA"
              value: "INFO"
            - name: "LOGGING_LEVEL_GRPC_INTERNAL"
              value: "ERROR"
            - name: "LOGGING_LEVEL_SPRING_BOOT"
              value: "INFO"
            - name: "LOGGING_LEVEL_SPRING_CONTEXT"
              value: "INFO"
            - name: "LOGGING_LEVEL_SPRING_SECURITY"
              value: "INFO"
            - name: "LOGGING_LEVEL_KAFKA"
              value: "ERROR"
            - name: "LOGGING_LEVEL_ZOOKEEPER"
              value: "ERROR"
            - name: "LOGGING_LEVEL_MONGODB"
              value: "WARN"
          resources:
            limits:
              memory: "800Mi" 
              cpu: "500m"
            requests:
              memory: "200Mi"
              cpu: "100m"
          readinessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:9003"]
            initialDelaySeconds: 150
          livenessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:9003"]
            initialDelaySeconds: 
            periodSeconds: 60
      
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-sitewhere-outbound-connectors-svc
  labels:
    app.kubernetes.io/name: sitewhere
    helm.sh/chart: sitewhere-0.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Tiller
spec:
  type: ClusterIP
  ports:
    - port: 9001
      targetPort: 9001
      protocol: TCP
      name: grpc-management
    - port: 9090
      targetPort: 9090
      protocol: TCP
      name: http-metrics
  selector:
    app.kubernetes.io/name: sitewhere-outbound-connectors
    app.kubernetes.io/instance: release-name

---
# Source: sitewhere/templates/Rule-Processing.yaml


apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-sitewhere-rule-processing
  labels:
    app.kubernetes.io/name: sitewhere
    helm.sh/chart: sitewhere-0.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Tiller
    sitewhere.io/role: "microservice"
    sitewhere.io/name: "rule-processing"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sitewhere-rule-processing
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sitewhere-rule-processing
        app.kubernetes.io/instance: release-name
        sitewhere.io/role: "microservice"
        sitewhere.io/name: "rule-processing"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/scheme: "http"
        prometheus.io/port: "9090"
    spec:
      containers:
        - name: sitewhere-rule-processing          
          image: "docker.io/sitewhere/service-rule-processing:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9001
            - containerPort: 9090
          env:
            - name: "sitewhere.k8s.pod.ip"
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: "sitewhere.namespace"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: "sitewhere.instance.id"
              value: "release-name"
            - name: "sitewhere.metrics.port"
              value: "9090"
            - name: "sitewhere.zookeeper.host"
              value: "release-name-cp-zookeeper"
            - name: "sitewhere.zookeeper.port"
              value: "2181"
            - name: "sitewhere.kafka.bootstrap.servers"
              value: "release-name-cp-kafka:9092"
            - name: "sitewhere.kafka.defaultTopicReplicationFactor"
              value: "3"
            - name: "sitewhere.grpc.maxRetryCount"
              value: "7"
            - name: "sitewhere.grpc.initialBackoffSeconds"
              value: "11"
            - name: "sitewhere.grpc.maxBackoffSeconds"
              value: "700"
            - name: "sitewhere.grpc.backoffMultiplier"
              value: "1.6"
            - name: "sitewhere.grpc.resolveFQDN"
              value: "false"
            - name: "mqtt.host"
              value: "release-name-sitewhere-mosquitto-svc"
            - name: "mongodb.host"
              value: "release-name-mongodb"
            - name: "mongodb.replicaset"
              value: "rs0"
            - name: "tenantsdb.url"
              value: "jdbc:postgresql://sitewhere-tenantsdb-headless.default.svc.cluster.local/tenantsdb"
            - name: "tenantsdb.username"
              value: "sitewhere"
            - name: "tenantsdb.password"
              valueFrom:
                secretKeyRef:
                  name: sitewhere-tenantsdb
                  key: postgresql-password
            - name: "warp10.url"
              value: "http://release-name-sitewhere-warp10-headless.default.svc.cluster.local:8080/api/v0"
            - name: "LOGGING_LEVEL_SITEWHERE"
              value: "INFO"
            - name: "LOGGING_LEVEL_SITEWHERE_GRPC"
              value: "INFO"
            - name: "LOGGING_LEVEL_SITEWHERE_KAFKA"
              value: "INFO"
            - name: "LOGGING_LEVEL_GRPC_INTERNAL"
              value: "ERROR"
            - name: "LOGGING_LEVEL_SPRING_BOOT"
              value: "INFO"
            - name: "LOGGING_LEVEL_SPRING_CONTEXT"
              value: "INFO"
            - name: "LOGGING_LEVEL_SPRING_SECURITY"
              value: "INFO"
            - name: "LOGGING_LEVEL_KAFKA"
              value: "ERROR"
            - name: "LOGGING_LEVEL_ZOOKEEPER"
              value: "ERROR"
            - name: "LOGGING_LEVEL_MONGODB"
              value: "WARN"
          resources:
            limits:
              memory: "800Mi" 
              cpu: "500m"
            requests:
              memory: "200Mi"
              cpu: "100m"
          readinessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:9003"]
            initialDelaySeconds: 150
          livenessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:9003"]
            initialDelaySeconds: 
            periodSeconds: 60
      
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-sitewhere-rule-processing-svc
  labels:
    app.kubernetes.io/name: sitewhere
    helm.sh/chart: sitewhere-0.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Tiller
spec:
  type: ClusterIP
  ports:
    - port: 9001
      targetPort: 9001
      protocol: TCP
      name: grpc-management
    - port: 9090
      targetPort: 9090
      protocol: TCP
      name: http-metrics
  selector:
    app.kubernetes.io/name: sitewhere-rule-processing
    app.kubernetes.io/instance: release-name
---
# Source: sitewhere/templates/Schedule-Management.yaml


apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-sitewhere-schedule-management
  labels:
    app.kubernetes.io/name: sitewhere
    helm.sh/chart: sitewhere-0.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Tiller
    sitewhere.io/role: "microservice"
    sitewhere.io/name: "schedule-management"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sitewhere-schedule-management
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sitewhere-schedule-management
        app.kubernetes.io/instance: release-name
        sitewhere.io/role: "microservice"
        sitewhere.io/name: "schedule-management"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/scheme: "http"
        prometheus.io/port: "9090"
    spec:
      containers:
        - name: sitewhere-schedule-management          
          image: "docker.io/sitewhere/service-schedule-management:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9000
            - containerPort: 9001
            - containerPort: 9090
          env:
            - name: "sitewhere.k8s.pod.ip"
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: "sitewhere.namespace"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: "sitewhere.instance.id"
              value: "release-name"
            - name: "sitewhere.metrics.port"
              value: "9090"
            - name: "sitewhere.zookeeper.host"
              value: "release-name-cp-zookeeper"
            - name: "sitewhere.zookeeper.port"
              value: "2181"
            - name: "sitewhere.kafka.bootstrap.servers"
              value: "release-name-cp-kafka:9092"
            - name: "sitewhere.kafka.defaultTopicReplicationFactor"
              value: "3"
            - name: "sitewhere.grpc.maxRetryCount"
              value: "7"
            - name: "sitewhere.grpc.initialBackoffSeconds"
              value: "11"
            - name: "sitewhere.grpc.maxBackoffSeconds"
              value: "700"
            - name: "sitewhere.grpc.backoffMultiplier"
              value: "1.6"
            - name: "sitewhere.grpc.resolveFQDN"
              value: "false"
            - name: "mqtt.host"
              value: "release-name-sitewhere-mosquitto-svc"
            - name: "mongodb.host"
              value: "release-name-mongodb"
            - name: "mongodb.replicaset"
              value: "rs0"
            - name: "tenantsdb.url"
              value: "jdbc:postgresql://sitewhere-tenantsdb-headless.default.svc.cluster.local/tenantsdb"
            - name: "tenantsdb.username"
              value: "sitewhere"
            - name: "tenantsdb.password"
              valueFrom:
                secretKeyRef:
                  name: sitewhere-tenantsdb
                  key: postgresql-password
            - name: "warp10.url"
              value: "http://release-name-sitewhere-warp10-headless.default.svc.cluster.local:8080/api/v0"
            - name: "LOGGING_LEVEL_SITEWHERE"
              value: "INFO"
            - name: "LOGGING_LEVEL_SITEWHERE_GRPC"
              value: "INFO"
            - name: "LOGGING_LEVEL_SITEWHERE_KAFKA"
              value: "INFO"
            - name: "LOGGING_LEVEL_GRPC_INTERNAL"
              value: "ERROR"
            - name: "LOGGING_LEVEL_SPRING_BOOT"
              value: "INFO"
            - name: "LOGGING_LEVEL_SPRING_CONTEXT"
              value: "INFO"
            - name: "LOGGING_LEVEL_SPRING_SECURITY"
              value: "INFO"
            - name: "LOGGING_LEVEL_KAFKA"
              value: "ERROR"
            - name: "LOGGING_LEVEL_ZOOKEEPER"
              value: "ERROR"
            - name: "LOGGING_LEVEL_MONGODB"
              value: "WARN"
          resources:
            limits:
              memory: "800Mi" 
              cpu: "500m"
            requests:
              memory: "200Mi"
              cpu: "100m"
          readinessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:9003"]
            initialDelaySeconds: 150
          livenessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:9003"]
            initialDelaySeconds: 
            periodSeconds: 60
      
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-sitewhere-schedule-management-svc
  labels:
    app.kubernetes.io/name: sitewhere
    helm.sh/chart: sitewhere-0.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Tiller
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - port: 9000
      targetPort: 9000
      protocol: TCP
      name: grpc-api
    - port: 9001
      targetPort: 9001
      protocol: TCP
      name: grpc-management
    - port: 9090
      targetPort: 9090
      protocol: TCP
      name: http-metrics
  selector:
    app.kubernetes.io/name: sitewhere-schedule-management
    app.kubernetes.io/instance: release-name
---
# Source: sitewhere/templates/Streaming-Media.yaml


apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-sitewhere-streaming-media
  labels:
    app.kubernetes.io/name: sitewhere
    helm.sh/chart: sitewhere-0.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Tiller
    sitewhere.io/role: "microservice"
    sitewhere.io/name: "streaming-media"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sitewhere-streaming-media
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sitewhere-streaming-media
        app.kubernetes.io/instance: release-name
        sitewhere.io/role: "microservice"
        sitewhere.io/name: "streaming-media"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/scheme: "http"
        prometheus.io/port: "9090"
    spec:
      containers:
        - name: sitewhere-streaming-media          
          image: "docker.io/sitewhere/service-streaming-media:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9000
            - containerPort: 9001
            - containerPort: 9090
          env:
            - name: "sitewhere.k8s.pod.ip"
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: "sitewhere.namespace"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: "sitewhere.instance.id"
              value: "release-name"
            - name: "sitewhere.metrics.port"
              value: "9090"
            - name: "sitewhere.zookeeper.host"
              value: "release-name-cp-zookeeper"
            - name: "sitewhere.zookeeper.port"
              value: "2181"
            - name: "sitewhere.kafka.bootstrap.servers"
              value: "release-name-cp-kafka:9092"
            - name: "sitewhere.kafka.defaultTopicReplicationFactor"
              value: "3"
            - name: "sitewhere.grpc.maxRetryCount"
              value: "7"
            - name: "sitewhere.grpc.initialBackoffSeconds"
              value: "11"
            - name: "sitewhere.grpc.maxBackoffSeconds"
              value: "700"
            - name: "sitewhere.grpc.backoffMultiplier"
              value: "1.6"
            - name: "sitewhere.grpc.resolveFQDN"
              value: "false"
            - name: "mqtt.host"
              value: "release-name-sitewhere-mosquitto-svc"
            - name: "mongodb.host"
              value: "release-name-mongodb"
            - name: "mongodb.replicaset"
              value: "rs0"
            - name: "tenantsdb.url"
              value: "jdbc:postgresql://sitewhere-tenantsdb-headless.default.svc.cluster.local/tenantsdb"
            - name: "tenantsdb.username"
              value: "sitewhere"
            - name: "tenantsdb.password"
              valueFrom:
                secretKeyRef:
                  name: sitewhere-tenantsdb
                  key: postgresql-password
            - name: "warp10.url"
              value: "http://release-name-sitewhere-warp10-headless.default.svc.cluster.local:8080/api/v0"
            - name: "LOGGING_LEVEL_SITEWHERE"
              value: "INFO"
            - name: "LOGGING_LEVEL_SITEWHERE_GRPC"
              value: "INFO"
            - name: "LOGGING_LEVEL_SITEWHERE_KAFKA"
              value: "INFO"
            - name: "LOGGING_LEVEL_GRPC_INTERNAL"
              value: "ERROR"
            - name: "LOGGING_LEVEL_SPRING_BOOT"
              value: "INFO"
            - name: "LOGGING_LEVEL_SPRING_CONTEXT"
              value: "INFO"
            - name: "LOGGING_LEVEL_SPRING_SECURITY"
              value: "INFO"
            - name: "LOGGING_LEVEL_KAFKA"
              value: "ERROR"
            - name: "LOGGING_LEVEL_ZOOKEEPER"
              value: "ERROR"
            - name: "LOGGING_LEVEL_MONGODB"
              value: "WARN"
          resources:
            limits:
              memory: "800Mi" 
              cpu: "500m"
            requests:
              memory: "200Mi"
              cpu: "100m"
          readinessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:9003"]
            initialDelaySeconds: 150
          livenessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:9003"]
            initialDelaySeconds: 
            periodSeconds: 60
      
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-sitewhere-streaming-media-svc
  labels:
    app.kubernetes.io/name: sitewhere
    helm.sh/chart: sitewhere-0.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Tiller
spec:
  type: ClusterIP
  ports:
    - port: 9000
      targetPort: 9000
      protocol: TCP
      name: grpc-api
    - port: 9001
      targetPort: 9001
      protocol: TCP
      name: grpc-management
    - port: 9090
      targetPort: 9090
      protocol: TCP
      name: http-metrics
  selector:
    app.kubernetes.io/name: sitewhere-streaming-media
    app.kubernetes.io/instance: release-name
---
# Source: sitewhere/templates/Web-Rest.yaml


apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-sitewhere-web-rest
  labels:
    app.kubernetes.io/name: sitewhere
    helm.sh/chart: sitewhere-0.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Tiller
    sitewhere.io/role: "microservice"
    sitewhere.io/name: "web-rest"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sitewhere-web-rest
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sitewhere-web-rest
        app.kubernetes.io/instance: release-name
        sitewhere.io/role: "microservice"
        sitewhere.io/name: "web-rest"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/scheme: "http"
        prometheus.io/port: "9090"
    spec:
      containers:
        - name: sitewhere-web-rest          
          image: "docker.io/sitewhere/service-web-rest:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9001
            - containerPort: 8080
            - containerPort: 9090
          env:
            - name: "sitewhere.k8s.pod.ip"
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: "sitewhere.namespace"
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: "sitewhere.instance.id"
              value: "release-name"
            - name: "sitewhere.metrics.port"
              value: "9090"
            - name: "sitewhere.zookeeper.host"
              value: "release-name-cp-zookeeper"
            - name: "sitewhere.zookeeper.port"
              value: "2181"
            - name: "sitewhere.kafka.bootstrap.servers"
              value: "release-name-cp-kafka:9092"
            - name: "sitewhere.kafka.defaultTopicReplicationFactor"
              value: "3"
            - name: "sitewhere.grpc.maxRetryCount"
              value: "7"
            - name: "sitewhere.grpc.initialBackoffSeconds"
              value: "11"
            - name: "sitewhere.grpc.maxBackoffSeconds"
              value: "700"
            - name: "sitewhere.grpc.backoffMultiplier"
              value: "1.6"
            - name: "sitewhere.grpc.resolveFQDN"
              value: "false"
            - name: "mqtt.host"
              value: "release-name-sitewhere-mosquitto-svc"
            - name: "mongodb.host"
              value: "release-name-mongodb"
            - name: "mongodb.replicaset"
              value: "rs0"
            - name: "tenantsdb.url"
              value: "jdbc:postgresql://sitewhere-tenantsdb-headless.default.svc.cluster.local/tenantsdb"
            - name: "tenantsdb.username"
              value: "sitewhere"
            - name: "tenantsdb.password"
              valueFrom:
                secretKeyRef:
                  name: sitewhere-tenantsdb
                  key: postgresql-password
            - name: "warp10.url"
              value: "http://release-name-sitewhere-warp10-headless.default.svc.cluster.local:8080/api/v0"
            - name: "LOGGING_LEVEL_SITEWHERE"
              value: "INFO"
            - name: "LOGGING_LEVEL_SITEWHERE_GRPC"
              value: "INFO"
            - name: "LOGGING_LEVEL_SITEWHERE_KAFKA"
              value: "INFO"
            - name: "LOGGING_LEVEL_GRPC_INTERNAL"
              value: "ERROR"
            - name: "LOGGING_LEVEL_SPRING_BOOT"
              value: "INFO"
            - name: "LOGGING_LEVEL_SPRING_CONTEXT"
              value: "INFO"
            - name: "LOGGING_LEVEL_SPRING_SECURITY"
              value: "INFO"
            - name: "LOGGING_LEVEL_KAFKA"
              value: "ERROR"
            - name: "LOGGING_LEVEL_ZOOKEEPER"
              value: "ERROR"
            - name: "LOGGING_LEVEL_MONGODB"
              value: "WARN"
          resources:
            limits:
              memory: "800Mi" 
              cpu: "500m"
            requests:
              memory: "200Mi"
              cpu: "100m"
          readinessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:9003"]
            initialDelaySeconds: 150
          livenessProbe:
            exec:
              command: ["/bin/grpc_health_probe", "-addr=:9003"]
            initialDelaySeconds: 
            periodSeconds: 60
      
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-sitewhere-web-rest-grpc
  labels:
    app.kubernetes.io/name: sitewhere
    helm.sh/chart: sitewhere-0.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Tiller
spec:
  type: ClusterIP
  ports:
    - port: 9001
      targetPort: 9001
      protocol: TCP
      name: grpc-management
    - port: 9090
      targetPort: 9090
      protocol: TCP
      name: http-metrics
  selector:
    app.kubernetes.io/name: sitewhere-web-rest
    app.kubernetes.io/instance: release-name
---
apiVersion: v1
kind: Service
metadata:
  name: release-name-sitewhere-web-rest-http
  labels:
    app.kubernetes.io/name: sitewhere
    helm.sh/chart: sitewhere-0.2.6
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Tiller
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
      name: http-web-rest
  selector:
    app.kubernetes.io/name: sitewhere-web-rest
    app.kubernetes.io/instance: release-name
---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: release-name-sitewhere-gateway
spec:
  selector:
    istio: ingressgateway # use Istio default gateway implementation
  servers:
  - port:
      number: 80
      name: http-web-rest
      protocol: HTTP
    hosts:
    - "*"
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: sitewhere-web-rest
spec:
  hosts:
  - "*"
  gateways:
  - release-name-sitewhere-gateway
  http:
  - match:
    - uri:
        prefix: /
    route:
    - destination:
        port:
          number: 8080
        host: release-name-sitewhere-web-rest-http

---
# Source: sitewhere/charts/sitewhere-infra-core/charts/cp-kafka/templates/statefulset.yaml
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: release-name-cp-kafka
  labels:
    app: cp-kafka
    chart: cp-kafka-0.1.0
    release: release-name
    heritage: Tiller
spec:
  serviceName: release-name-cp-kafka-headless
  podManagementPolicy: Parallel
  replicas: 3
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: cp-kafka
        release: release-name
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - cp-kafka
                  - key: "release"
                    operator: In
                    values:
                    - release-name
              topologyKey: "kubernetes.io/hostname"
      containers:
      - name: cp-kafka-broker
        image: "confluentinc/cp-enterprise-kafka:5.2.1"
        imagePullPolicy: "IfNotPresent"
        ports:
        - containerPort: 9092
          name: kafka
        resources:
          {}
          
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: HOST_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KAFKA_HEAP_OPTS
          value: -Xms512M -Xmx512M
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: "release-name-cp-zookeeper-headless:2181"
        - name: KAFKA_LOG_DIRS
          value: "/opt/kafka/data-0/logs"
        - name: KAFKA_METRIC_REPORTERS
          value: "io.confluent.metrics.reporter.ConfluentMetricsReporter"
        - name: CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS
          value: "PLAINTEXT://release-name-cp-kafka-headless:9092"
        - name: "KAFKA_AUTO_CREATE_TOPICS_ENABLE"
          value: "false"
        - name: "KAFKA_LISTENER_SECURITY_PROTOCOL_MAP"
          value: "PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT"
        - name: "KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR"
          value: "3"
        - name: KAFKA_JMX_PORT
          value: "5555"
        # This is required because the Downward API does not yet support identification of
        # pod numbering in statefulsets. Thus, we are required to specify a command which
        # allows us to extract the pod ID for usage as the Kafka Broker ID.
        # See: https://github.com/kubernetes/kubernetes/issues/31218
        command:
        - sh
        - -exc
        - |
          export KAFKA_BROKER_ID=${HOSTNAME##*-} && \
          export KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://${POD_NAME}.release-name-cp-kafka-headless.${POD_NAMESPACE}:9092,EXTERNAL://${HOST_IP}:$((31090 + ${KAFKA_BROKER_ID})) && \
          exec /etc/confluent/docker/run
        volumeMounts:
        - name: datadir-0
          mountPath: /opt/kafka/data-0
      volumes:
  volumeClaimTemplates:
  - metadata:
      name: datadir-0
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: "8Gi"

---
# Source: sitewhere/charts/sitewhere-infra-core/charts/cp-zookeeper/templates/statefulset.yaml
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: release-name-cp-zookeeper
  labels:
    app: cp-zookeeper
    chart: cp-zookeeper-0.1.0
    release: release-name
    heritage: Tiller
spec:
  serviceName: release-name-cp-zookeeper-headless
  podManagementPolicy: Parallel
  replicas: 3
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: cp-zookeeper
        release: release-name
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - cp-zookeeper
                  - key: "release"
                    operator: In
                    values:
                    - release-name
              topologyKey: "kubernetes.io/hostname"
      containers:
      - name: cp-zookeeper-server
        image: "confluentinc/cp-zookeeper:5.2.1"
        imagePullPolicy: "IfNotPresent"
        ports:
        - containerPort: 2181
          name: client
        - containerPort: 2888
          name: server
        - containerPort: 3888
          name: leader-election
        resources:
          {}
          
        env:
        - name : KAFKA_HEAP_OPTS
          value: "-Xms512M -Xmx512M"
        - name : KAFKA_JMX_PORT
          value: "5555"
        - name : ZOOKEEPER_TICK_TIME
          value: "2000"
        - name : ZOOKEEPER_SYNC_LIMIT
          value: "5"
        - name : ZOOKEEPER_INIT_LIMIT
          value: "10"
        - name : ZOOKEEPER_MAX_CLIENT_CNXNS
          value: "60"
        - name : ZOOKEEPER_AUTOPURGE_SNAP_RETAIN_COUNT
          value: "3"
        - name : ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL
          value: "24"
        - name: ZOOKEEPER_CLIENT_PORT
          value: "2181"
        - name : ZOOKEEPER_SERVERS
          value: "release-name-cp-zookeeper-0.release-name-cp-zookeeper-headless.default:2888:3888;release-name-cp-zookeeper-1.release-name-cp-zookeeper-headless.default:2888:3888;release-name-cp-zookeeper-2.release-name-cp-zookeeper-headless.default:2888:3888"
        # ZOOKEEPER_SERVER_ID is required just to pass cp-zookeeper ensure script for env check,
        # the value(metadata.mame) is not used and will be overwritten in command part
        - name: ZOOKEEPER_SERVER_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        command:
        - "bash"
        - "-c"
        - |
          ZK_FIX_HOST_REGEX="s/${HOSTNAME}\.[^:]*:/0.0.0.0:/g"
          ZOOKEEPER_SERVER_ID=$((${HOSTNAME##*-}+1)) \
          ZOOKEEPER_SERVERS=`echo $ZOOKEEPER_SERVERS | sed -e "$ZK_FIX_HOST_REGEX"` \
          /etc/confluent/docker/run
        volumeMounts:
        - name: datadir
          mountPath: /var/lib/zookeeper/data
        - name: datalogdir
          mountPath: /var/lib/zookeeper/log
      volumes:
      
  volumeClaimTemplates:
  - metadata:
      name: datadir
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: "4Gi"
  - metadata:
      name: datalogdir
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: "4Gi"

---
# Source: sitewhere/charts/sitewhere-infra-core/charts/postgresql/templates/statefulset.yaml
apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  name: release-name-postgresql
  labels:
    app: postgresql
    chart: postgresql-5.3.7
    release: "release-name"
    heritage: "Tiller"
spec:
  serviceName: release-name-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: postgresql
      release: "release-name"
      role: master
  template:
    metadata:
      name: release-name-postgresql
      labels:
        app: postgresql
        chart: postgresql-5.3.7
        release: "release-name"
        heritage: "Tiller"
        role: master
      annotations:
        sidecar.istio.io/inject: "false"
        
    spec:      
      securityContext:
        fsGroup: 1001
      initContainers:
      - name: init-chmod-data
        image: docker.io/bitnami/minideb:latest
        imagePullPolicy: "Always"
        resources:
          requests:
            cpu: 250m
            memory: 256Mi
          
        command:
          - sh
          - -c
          - |
            mkdir -p /bitnami/postgresql/data
            chmod 700 /bitnami/postgresql/data
            find /bitnami/postgresql -mindepth 1 -maxdepth 1 -not -name ".snapshot" | \
              xargs chown -R 1001:1001
        securityContext:
          runAsUser: 0
        volumeMounts:
        - name: data
          mountPath: /bitnami/postgresql
          subPath: 
      containers:
      - name: release-name-postgresql
        image: docker.io/bitnami/postgresql:11.3.0-debian-9-r38
        imagePullPolicy: "IfNotPresent"
        resources:
          requests:
            cpu: 250m
            memory: 256Mi
          
        securityContext:
          runAsUser: 1001
        env:
        - name: BITNAMI_DEBUG
          value: "false"
        - name: POSTGRESQL_PORT_NUMBER
          value: "5432"
        - name: PGDATA
          value: "/bitnami/postgresql/data"
        - name: POSTGRES_USER
          value: "syncope"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: syncope
              key: postgresql-password
        - name: POSTGRES_DB
          value: "syncope"
        ports:
        - name: postgresql
          containerPort: 5432
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready -U "syncope" -d "syncope" -h 127.0.0.1 -p 5432
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - |
              pg_isready -U "syncope" -d "syncope" -h 127.0.0.1 -p 5432
              [ -f /opt/bitnami/postgresql/tmp/.initialized ]
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        volumeMounts:
        - name: data
          mountPath: /bitnami/postgresql
          subPath: 
      volumes:
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "4Gi"

---
# Source: sitewhere/charts/sitewhere-infra-database/charts/cassandra/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-cassandra
  labels:
    app: cassandra
    chart: cassandra-0.10.1
    release: release-name
    heritage: Tiller
spec:
  selector:
    matchLabels:
      app: cassandra
      release: release-name
  serviceName: release-name-cassandra
  replicas: 3
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: OnDelete
  template:
    metadata:
      labels:
        app: cassandra
        release: release-name
      annotations:
        sidecar.istio.io/inject: "false"
        
    spec:
      containers:
      - name: release-name-cassandra
        image: "cassandra:3.11.3"
        imagePullPolicy: "IfNotPresent"
        resources:
          {}
          
        env:
        - name: CASSANDRA_SEEDS
          value: "release-name-cassandra-0.release-name-cassandra.default.svc.cluster.local,release-name-cassandra-1.release-name-cassandra.default.svc.cluster.local"
        - name: MAX_HEAP_SIZE
          value: "2048M"
        - name: HEAP_NEWSIZE
          value: "512M"
        - name: CASSANDRA_ENDPOINT_SNITCH
          value: "SimpleSnitch"
        - name: CASSANDRA_CLUSTER_NAME
          value: "cassandra"
        - name: CASSANDRA_DC
          value: "DC1"
        - name: CASSANDRA_RACK
          value: "RAC1"
        - name: CASSANDRA_START_RPC
          value: "false"
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        livenessProbe:
          exec:
            command: [ "/bin/sh", "-c", "nodetool status" ]
          initialDelaySeconds: 90
          periodSeconds: 30
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          exec:
            command: [ "/bin/sh", "-c", "nodetool status | grep -E \"^UN\\s+${POD_IP}\"" ]
          initialDelaySeconds: 90
          periodSeconds: 30
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        ports:
        - name: intra
          containerPort: 7000
        - name: tls
          containerPort: 7001
        - name: jmx
          containerPort: 7199
        - name: cql
          containerPort: 9042
        - name: thrift
          containerPort: 9160
        volumeMounts:
        - name: data
          mountPath: /var/lib/cassandra
      terminationGracePeriodSeconds: 30
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        app: cassandra
        chart: cassandra-0.10.1
        release: release-name
        heritage: Tiller
    spec:
      accessModes:
        - "ReadWriteOnce"
      resources:
        requests:
          storage: "10Gi"

---
# Source: sitewhere/charts/sitewhere-infra-database/charts/influxdb/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "release-name-influxdb"
  labels:
    app: "release-name-influxdb"
    chart: "influxdb-3.0.2"
    release: "release-name"
    heritage: "Tiller"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: release-name-influxdb
  serviceName: "release-name-influxdb"
  template:
    metadata:
      labels:
        app: release-name-influxdb
        release: "release-name"
      annotations:
        sidecar.istio.io/inject: "false"
        
    spec:
      containers:
      - name: release-name-influxdb
        image: "influxdb:1.7.6-alpine"
        imagePullPolicy: "IfNotPresent"
        resources:
          {}
          
        ports:
        - name: api
          containerPort: 8086
        livenessProbe:
          httpGet:
            path: /ping
            port: api
          initialDelaySeconds: 30
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /ping
            port: api
          initialDelaySeconds: 5
          timeoutSeconds: 1
        volumeMounts:
        - name: release-name-influxdb-data
          mountPath: /var/lib/influxdb
        - name: config
          mountPath: /etc/influxdb
      volumes:
      - name: config
        configMap:
          name: release-name-influxdb
  volumeClaimTemplates:
    - metadata:
        name: release-name-influxdb-data
        annotations:
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "10Gi"
---
# Source: sitewhere/charts/sitewhere-infra-database/charts/mongodb/templates/statefulset-arbiter-rs.yaml

apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: mongodb
    chart: mongodb-5.2.0
    heritage: Tiller
    release: release-name
  name: release-name-mongodb-arbiter
spec:
  selector:
    matchLabels:
      app: mongodb
      release: release-name
      component: arbiter
  serviceName: release-name-mongodb-headless
  replicas: 1
  template:
    metadata:
      labels:
        app: mongodb
        chart: mongodb-5.2.0
        release: release-name
        component: arbiter
      annotations:
        sidecar.istio.io/inject: "false"
        
    spec:
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      containers:
        - name: mongodb-arbiter
          image: docker.io/bitnami/mongodb:4.0.3
          imagePullPolicy: Always
          ports:
          - containerPort: 27017
            name: mongodb
          env:
          - name: MONGODB_SYSTEM_LOG_VERBOSITY
            value: "0"
          - name: MONGODB_DISABLE_SYSTEM_LOG
            value: "no"
          - name: MONGODB_POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: MONGODB_REPLICA_SET_MODE
            value: "arbiter"
          - name: MONGODB_PRIMARY_HOST
            value: release-name-mongodb
          - name: MONGODB_REPLICA_SET_NAME
            value: "rs0"
          - name: MONGODB_ADVERTISED_HOSTNAME
            value: "$(MONGODB_POD_NAME).release-name-mongodb-headless.default.svc.cluster.local"
          - name: MONGODB_ENABLE_IPV6
            value: "yes"
          livenessProbe:
            tcpSocket:
              port: mongodb
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            tcpSocket:
              port: mongodb
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
          resources:
            {}
            
      volumes:

---
# Source: sitewhere/charts/sitewhere-infra-database/charts/mongodb/templates/statefulset-primary-rs.yaml

apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: mongodb
    chart: mongodb-5.2.0
    heritage: Tiller
    release: release-name
  name: release-name-mongodb-primary
spec:
  serviceName: release-name-mongodb-headless
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
      release: release-name
      component: primary
  template:
    metadata:
      labels:
        app: mongodb
        chart: mongodb-5.2.0
        release: release-name
        component: primary
      annotations:
        sidecar.istio.io/inject: "false"
        
    spec:
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      containers:
        - name: mongodb-primary
          image: docker.io/bitnami/mongodb:4.0.3
          imagePullPolicy: Always
          ports:
          - containerPort: 27017
            name: mongodb
          env:
          - name: MONGODB_SYSTEM_LOG_VERBOSITY
            value: "0"
          - name: MONGODB_DISABLE_SYSTEM_LOG
            value: "no"
          - name: MONGODB_POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: MONGODB_REPLICA_SET_MODE
            value: "primary"
          - name: MONGODB_REPLICA_SET_NAME
            value: "rs0"
          - name: MONGODB_ADVERTISED_HOSTNAME
            value: "$(MONGODB_POD_NAME).release-name-mongodb-headless.default.svc.cluster.local"
          - name: MONGODB_ENABLE_IPV6
            value: "yes"
          livenessProbe:
            exec:
              command:
                - mongo
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - mongo
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: datadir
              mountPath: /bitnami/mongodb
          resources:
            {}
            
      volumes:
  volumeClaimTemplates:
    - metadata:
        name: datadir
        annotations:
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"

---
# Source: sitewhere/charts/sitewhere-infra-database/charts/mongodb/templates/statefulset-secondary-rs.yaml

apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: mongodb
    chart: mongodb-5.2.0
    heritage: Tiller
    release: release-name
  name: release-name-mongodb-secondary
spec:
  selector:
    matchLabels:
      app: mongodb
      release: release-name
      component: secondary
  podManagementPolicy: "Parallel"
  serviceName: release-name-mongodb-headless
  replicas: 1
  template:
    metadata:
      labels:
        app: mongodb
        chart: mongodb-5.2.0
        release: release-name
        component: secondary
      annotations:
        sidecar.istio.io/inject: "false"
        
    spec:
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      containers:
        - name: mongodb-secondary
          image: docker.io/bitnami/mongodb:4.0.3
          imagePullPolicy: Always
          ports:
          - containerPort: 27017
            name: mongodb
          env:
          - name: MONGODB_SYSTEM_LOG_VERBOSITY
            value: "0"
          - name: MONGODB_DISABLE_SYSTEM_LOG
            value: "no"
          - name: MONGODB_POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: MONGODB_REPLICA_SET_MODE
            value: "secondary"
          - name: MONGODB_PRIMARY_HOST
            value: release-name-mongodb
          - name: MONGODB_REPLICA_SET_NAME
            value: "rs0"
          - name: MONGODB_ADVERTISED_HOSTNAME
            value: "$(MONGODB_POD_NAME).release-name-mongodb-headless.default.svc.cluster.local"
          - name: MONGODB_ENABLE_IPV6
            value: "yes"
          livenessProbe:
            exec:
              command:
                - mongo
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - mongo
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: datadir
              mountPath: /bitnami/mongodb
          resources:
            {}
            
      volumes:
  volumeClaimTemplates:
    - metadata:
        name: datadir
        annotations:
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"

---
# Source: sitewhere/charts/sitewhere-infra-database/charts/tenantsdb/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-tenantsdb
  labels:
    app: tenantsdb
    chart: tenantsdb-6.5.0
    release: "release-name"
    heritage: "Tiller"
spec:
  serviceName: release-name-tenantsdb-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: tenantsdb
      release: "release-name"
      role: master
  template:
    metadata:
      name: release-name-tenantsdb
      labels:
        app: tenantsdb
        chart: tenantsdb-6.5.0
        release: "release-name"
        heritage: "Tiller"
        role: master
      annotations:
        sidecar.istio.io/inject: "false"
        
    spec:      
      securityContext:
        fsGroup: 1001
      initContainers:
      - name: init-chmod-data
        image: docker.io/bitnami/minideb:stretch
        imagePullPolicy: "Always"
        resources:
          requests:
            cpu: 250m
            memory: 256Mi
          
        command:
          - sh
          - -c
          - |
            mkdir -p /bitnami/postgresql/data
            chmod 700 /bitnami/postgresql/data
            find /bitnami/postgresql -mindepth 0 -maxdepth 1 -not -name ".snapshot" -not -name "lost+found" | \
              xargs chown -R 1001:1001
        securityContext:
          runAsUser: 0
        volumeMounts:
        - name: data
          mountPath: /bitnami/postgresql
          subPath: 
      containers:
      - name: release-name-tenantsdb
        image: docker.io/bitnami/postgresql:11.5.0-debian-9-r60
        imagePullPolicy: "IfNotPresent"
        resources:
          requests:
            cpu: 250m
            memory: 256Mi
          
        securityContext:
          runAsUser: 1001
        env:
        - name: BITNAMI_DEBUG
          value: "false"
        - name: POSTGRESQL_PORT_NUMBER
          value: "5432"
        - name: POSTGRESQL_VOLUME_DIR
          value: "/bitnami/postgresql"
        - name: PGDATA
          value: "/bitnami/postgresql/data"
        - name: POSTGRES_USER
          value: "sitewhere"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: release-name-tenantsdb
              key: postgresql-password
        - name: POSTGRES_DB
          value: "tenantsdb"
        ports:
        - name: postgresql
          containerPort: 5432
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - exec pg_isready -U "sitewhere" -d "tenantsdb" -h 127.0.0.1 -p 5432
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - -e
            - |
              pg_isready -U "sitewhere" -d "tenantsdb" -h 127.0.0.1 -p 5432
              [ -f /opt/bitnami/postgresql/tmp/.initialized ]
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 6
        volumeMounts:
        - name: data
          mountPath: /bitnami/postgresql
          subPath: 
      volumes:
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "10Gi"
        

---
# Source: sitewhere/charts/sitewhere-infra-database/charts/warp10/templates/statefulset.yaml
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: "release-name-warp10"
  labels:
    app.kubernetes.io/name: warp10
    helm.sh/chart: warp10-0.2.0
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Tiller
    app: warp10
    chart: warp10-0.2.0
    release: release-name
    heritage: Tiller
spec:
  serviceName: release-name-warp10-headless
  podManagementPolicy: 
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: warp10
        release: release-name
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - warp10
                  - key: "release"
                    operator: In
                    values:
                    - release-name
              topologyKey: "kubernetes.io/hostname"
      containers:
      - name: release-name-warp10
        image: "sitewhere/warp10:2.2.0-sitewhere"
        imagePullPolicy: "IfNotPresent"
        resources:
          {}
          
        ports:
        - name: api
          containerPort: 8080
        - name: studio
          containerPort: 8081
        volumeMounts:
        - name: datadir-0
          mountPath: /data
      volumes:
  volumeClaimTemplates:
  - metadata:
      name: datadir-0
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: "10Gi"
---
# Source: sitewhere/charts/sitewhere-infra-core/charts/cp-kafka/templates/jmx-configmap.yaml

---
# Source: sitewhere/charts/sitewhere-infra-core/charts/cp-kafka/templates/nodeport-service.yaml


---
# Source: sitewhere/charts/sitewhere-infra-core/charts/cp-zookeeper/templates/jmx-configmap.yaml

---
# Source: sitewhere/charts/sitewhere-infra-core/charts/postgresql/templates/configmap.yaml


---
# Source: sitewhere/charts/sitewhere-infra-core/charts/postgresql/templates/extended-config-configmap.yaml


---
# Source: sitewhere/charts/sitewhere-infra-core/charts/postgresql/templates/initialization-configmap.yaml


---
# Source: sitewhere/charts/sitewhere-infra-core/charts/postgresql/templates/metrics-svc.yaml


---
# Source: sitewhere/charts/sitewhere-infra-core/charts/postgresql/templates/networkpolicy.yaml


---
# Source: sitewhere/charts/sitewhere-infra-core/charts/postgresql/templates/secrets.yaml

---
# Source: sitewhere/charts/sitewhere-infra-core/charts/postgresql/templates/serviceaccount.yaml

---
# Source: sitewhere/charts/sitewhere-infra-core/charts/postgresql/templates/servicemonitor.yaml


---
# Source: sitewhere/charts/sitewhere-infra-core/charts/postgresql/templates/statefulset-slaves.yaml


---
# Source: sitewhere/charts/sitewhere-infra-core/charts/postgresql/templates/svc-read.yaml


---
# Source: sitewhere/charts/sitewhere-infra-database/charts/cassandra/templates/backup/cronjob.yaml


---
# Source: sitewhere/charts/sitewhere-infra-database/charts/cassandra/templates/backup/rbac.yaml


---
# Source: sitewhere/charts/sitewhere-infra-database/charts/cassandra/templates/configmap.yaml


---
# Source: sitewhere/charts/sitewhere-infra-database/charts/cassandra/templates/pdb.yaml

---
# Source: sitewhere/charts/sitewhere-infra-database/charts/influxdb/templates/backup-cronjob.yaml


---
# Source: sitewhere/charts/sitewhere-infra-database/charts/influxdb/templates/ingress.yaml

---
# Source: sitewhere/charts/sitewhere-infra-database/charts/influxdb/templates/init-config.yaml

---
# Source: sitewhere/charts/sitewhere-infra-database/charts/influxdb/templates/post-install-set-auth.yaml

---
# Source: sitewhere/charts/sitewhere-infra-database/charts/influxdb/templates/secret.yaml

---
# Source: sitewhere/charts/sitewhere-infra-database/charts/mongodb/templates/configmap.yaml

---
# Source: sitewhere/charts/sitewhere-infra-database/charts/mongodb/templates/deployment-standalone.yaml

---
# Source: sitewhere/charts/sitewhere-infra-database/charts/mongodb/templates/initialization-configmap.yaml

---
# Source: sitewhere/charts/sitewhere-infra-database/charts/mongodb/templates/prometheus-alerting-rule.yaml


---
# Source: sitewhere/charts/sitewhere-infra-database/charts/mongodb/templates/prometheus-service-monitor.yaml
      

---
# Source: sitewhere/charts/sitewhere-infra-database/charts/mongodb/templates/pvc-standalone.yaml

---
# Source: sitewhere/charts/sitewhere-infra-database/charts/mongodb/templates/secrets.yaml


---
# Source: sitewhere/charts/sitewhere-infra-database/charts/mongodb/templates/svc-standalone.yaml


---
# Source: sitewhere/charts/sitewhere-infra-database/charts/tenantsdb/templates/configmap.yaml


---
# Source: sitewhere/charts/sitewhere-infra-database/charts/tenantsdb/templates/extended-config-configmap.yaml


---
# Source: sitewhere/charts/sitewhere-infra-database/charts/tenantsdb/templates/initialization-configmap.yaml


---
# Source: sitewhere/charts/sitewhere-infra-database/charts/tenantsdb/templates/metrics-svc.yaml


---
# Source: sitewhere/charts/sitewhere-infra-database/charts/tenantsdb/templates/networkpolicy.yaml


---
# Source: sitewhere/charts/sitewhere-infra-database/charts/tenantsdb/templates/serviceaccount.yaml

---
# Source: sitewhere/charts/sitewhere-infra-database/charts/tenantsdb/templates/servicemonitor.yaml


---
# Source: sitewhere/charts/sitewhere-infra-database/charts/tenantsdb/templates/statefulset-slaves.yaml


---
# Source: sitewhere/charts/sitewhere-infra-database/charts/tenantsdb/templates/svc-read.yaml


---
# Source: sitewhere/charts/sitewhere-infra-database/charts/warp10/templates/ingress.yaml

